// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package referralv1beta1

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Info_7_list)(nil)

type _Info_7_list struct {
	list *[]uint64
}

func (x *_Info_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Info_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_Info_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Info_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Info_7_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Info at list field ActiveRefCounts as it is not of Message kind"))
}

func (x *_Info_7_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Info_7_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_Info_7_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Info                     protoreflect.MessageDescriptor
	fd_Info_status              protoreflect.FieldDescriptor
	fd_Info_referrer            protoreflect.FieldDescriptor
	fd_Info_active              protoreflect.FieldDescriptor
	fd_Info_active_ref_counts   protoreflect.FieldDescriptor
	fd_Info_status_downgrade_at protoreflect.FieldDescriptor
	fd_Info_self_delegated      protoreflect.FieldDescriptor
	fd_Info_team_delegated      protoreflect.FieldDescriptor
	fd_Info_active_count        protoreflect.FieldDescriptor
)

func init() {
	file_axiome_referral_v1beta1_types_proto_init()
	md_Info = File_axiome_referral_v1beta1_types_proto.Messages().ByName("Info")
	fd_Info_status = md_Info.Fields().ByName("status")
	fd_Info_referrer = md_Info.Fields().ByName("referrer")
	fd_Info_active = md_Info.Fields().ByName("active")
	fd_Info_active_ref_counts = md_Info.Fields().ByName("active_ref_counts")
	fd_Info_status_downgrade_at = md_Info.Fields().ByName("status_downgrade_at")
	fd_Info_self_delegated = md_Info.Fields().ByName("self_delegated")
	fd_Info_team_delegated = md_Info.Fields().ByName("team_delegated")
	fd_Info_active_count = md_Info.Fields().ByName("active_count")
}

var _ protoreflect.Message = (*fastReflection_Info)(nil)

type fastReflection_Info Info

func (x *Info) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Info)(x)
}

func (x *Info) slowProtoReflect() protoreflect.Message {
	mi := &file_axiome_referral_v1beta1_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Info_messageType fastReflection_Info_messageType
var _ protoreflect.MessageType = fastReflection_Info_messageType{}

type fastReflection_Info_messageType struct{}

func (x fastReflection_Info_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Info)(nil)
}
func (x fastReflection_Info_messageType) New() protoreflect.Message {
	return new(fastReflection_Info)
}
func (x fastReflection_Info_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Info
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Info) Descriptor() protoreflect.MessageDescriptor {
	return md_Info
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Info) Type() protoreflect.MessageType {
	return _fastReflection_Info_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Info) New() protoreflect.Message {
	return new(fastReflection_Info)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Info) Interface() protoreflect.ProtoMessage {
	return (*Info)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Info) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_Info_status, value) {
			return
		}
	}
	if x.Referrer != "" {
		value := protoreflect.ValueOfString(x.Referrer)
		if !f(fd_Info_referrer, value) {
			return
		}
	}
	if x.Active != false {
		value := protoreflect.ValueOfBool(x.Active)
		if !f(fd_Info_active, value) {
			return
		}
	}
	if len(x.ActiveRefCounts) != 0 {
		value := protoreflect.ValueOfList(&_Info_7_list{list: &x.ActiveRefCounts})
		if !f(fd_Info_active_ref_counts, value) {
			return
		}
	}
	if x.StatusDowngradeAt != nil {
		value := protoreflect.ValueOfMessage(x.StatusDowngradeAt.ProtoReflect())
		if !f(fd_Info_status_downgrade_at, value) {
			return
		}
	}
	if x.SelfDelegated != "" {
		value := protoreflect.ValueOfString(x.SelfDelegated)
		if !f(fd_Info_self_delegated, value) {
			return
		}
	}
	if x.TeamDelegated != "" {
		value := protoreflect.ValueOfString(x.TeamDelegated)
		if !f(fd_Info_team_delegated, value) {
			return
		}
	}
	if x.ActiveCount != nil {
		value := protoreflect.ValueOfMessage(x.ActiveCount.ProtoReflect())
		if !f(fd_Info_active_count, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Info) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "axiome.referral.v1beta1.Info.status":
		return x.Status != 0
	case "axiome.referral.v1beta1.Info.referrer":
		return x.Referrer != ""
	case "axiome.referral.v1beta1.Info.active":
		return x.Active != false
	case "axiome.referral.v1beta1.Info.active_ref_counts":
		return len(x.ActiveRefCounts) != 0
	case "axiome.referral.v1beta1.Info.status_downgrade_at":
		return x.StatusDowngradeAt != nil
	case "axiome.referral.v1beta1.Info.self_delegated":
		return x.SelfDelegated != ""
	case "axiome.referral.v1beta1.Info.team_delegated":
		return x.TeamDelegated != ""
	case "axiome.referral.v1beta1.Info.active_count":
		return x.ActiveCount != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.Info"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.Info does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Info) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "axiome.referral.v1beta1.Info.status":
		x.Status = 0
	case "axiome.referral.v1beta1.Info.referrer":
		x.Referrer = ""
	case "axiome.referral.v1beta1.Info.active":
		x.Active = false
	case "axiome.referral.v1beta1.Info.active_ref_counts":
		x.ActiveRefCounts = nil
	case "axiome.referral.v1beta1.Info.status_downgrade_at":
		x.StatusDowngradeAt = nil
	case "axiome.referral.v1beta1.Info.self_delegated":
		x.SelfDelegated = ""
	case "axiome.referral.v1beta1.Info.team_delegated":
		x.TeamDelegated = ""
	case "axiome.referral.v1beta1.Info.active_count":
		x.ActiveCount = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.Info"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.Info does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Info) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "axiome.referral.v1beta1.Info.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "axiome.referral.v1beta1.Info.referrer":
		value := x.Referrer
		return protoreflect.ValueOfString(value)
	case "axiome.referral.v1beta1.Info.active":
		value := x.Active
		return protoreflect.ValueOfBool(value)
	case "axiome.referral.v1beta1.Info.active_ref_counts":
		if len(x.ActiveRefCounts) == 0 {
			return protoreflect.ValueOfList(&_Info_7_list{})
		}
		listValue := &_Info_7_list{list: &x.ActiveRefCounts}
		return protoreflect.ValueOfList(listValue)
	case "axiome.referral.v1beta1.Info.status_downgrade_at":
		value := x.StatusDowngradeAt
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "axiome.referral.v1beta1.Info.self_delegated":
		value := x.SelfDelegated
		return protoreflect.ValueOfString(value)
	case "axiome.referral.v1beta1.Info.team_delegated":
		value := x.TeamDelegated
		return protoreflect.ValueOfString(value)
	case "axiome.referral.v1beta1.Info.active_count":
		value := x.ActiveCount
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.Info"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.Info does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Info) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "axiome.referral.v1beta1.Info.status":
		x.Status = (Status)(value.Enum())
	case "axiome.referral.v1beta1.Info.referrer":
		x.Referrer = value.Interface().(string)
	case "axiome.referral.v1beta1.Info.active":
		x.Active = value.Bool()
	case "axiome.referral.v1beta1.Info.active_ref_counts":
		lv := value.List()
		clv := lv.(*_Info_7_list)
		x.ActiveRefCounts = *clv.list
	case "axiome.referral.v1beta1.Info.status_downgrade_at":
		x.StatusDowngradeAt = value.Message().Interface().(*timestamppb.Timestamp)
	case "axiome.referral.v1beta1.Info.self_delegated":
		x.SelfDelegated = value.Interface().(string)
	case "axiome.referral.v1beta1.Info.team_delegated":
		x.TeamDelegated = value.Interface().(string)
	case "axiome.referral.v1beta1.Info.active_count":
		x.ActiveCount = value.Message().Interface().(*ActiveAggregations)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.Info"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.Info does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Info) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "axiome.referral.v1beta1.Info.active_ref_counts":
		if x.ActiveRefCounts == nil {
			x.ActiveRefCounts = []uint64{}
		}
		value := &_Info_7_list{list: &x.ActiveRefCounts}
		return protoreflect.ValueOfList(value)
	case "axiome.referral.v1beta1.Info.status_downgrade_at":
		if x.StatusDowngradeAt == nil {
			x.StatusDowngradeAt = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.StatusDowngradeAt.ProtoReflect())
	case "axiome.referral.v1beta1.Info.active_count":
		if x.ActiveCount == nil {
			x.ActiveCount = new(ActiveAggregations)
		}
		return protoreflect.ValueOfMessage(x.ActiveCount.ProtoReflect())
	case "axiome.referral.v1beta1.Info.status":
		panic(fmt.Errorf("field status of message axiome.referral.v1beta1.Info is not mutable"))
	case "axiome.referral.v1beta1.Info.referrer":
		panic(fmt.Errorf("field referrer of message axiome.referral.v1beta1.Info is not mutable"))
	case "axiome.referral.v1beta1.Info.active":
		panic(fmt.Errorf("field active of message axiome.referral.v1beta1.Info is not mutable"))
	case "axiome.referral.v1beta1.Info.self_delegated":
		panic(fmt.Errorf("field self_delegated of message axiome.referral.v1beta1.Info is not mutable"))
	case "axiome.referral.v1beta1.Info.team_delegated":
		panic(fmt.Errorf("field team_delegated of message axiome.referral.v1beta1.Info is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.Info"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.Info does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Info) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "axiome.referral.v1beta1.Info.status":
		return protoreflect.ValueOfEnum(0)
	case "axiome.referral.v1beta1.Info.referrer":
		return protoreflect.ValueOfString("")
	case "axiome.referral.v1beta1.Info.active":
		return protoreflect.ValueOfBool(false)
	case "axiome.referral.v1beta1.Info.active_ref_counts":
		list := []uint64{}
		return protoreflect.ValueOfList(&_Info_7_list{list: &list})
	case "axiome.referral.v1beta1.Info.status_downgrade_at":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "axiome.referral.v1beta1.Info.self_delegated":
		return protoreflect.ValueOfString("")
	case "axiome.referral.v1beta1.Info.team_delegated":
		return protoreflect.ValueOfString("")
	case "axiome.referral.v1beta1.Info.active_count":
		m := new(ActiveAggregations)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.Info"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.Info does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Info) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in axiome.referral.v1beta1.Info", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Info) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Info) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Info) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Info) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Info)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		l = len(x.Referrer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Active {
			n += 2
		}
		if len(x.ActiveRefCounts) > 0 {
			l = 0
			for _, e := range x.ActiveRefCounts {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.StatusDowngradeAt != nil {
			l = options.Size(x.StatusDowngradeAt)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SelfDelegated)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TeamDelegated)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ActiveCount != nil {
			l = options.Size(x.ActiveCount)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Info)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ActiveCount != nil {
			encoded, err := options.Marshal(x.ActiveCount)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.TeamDelegated) > 0 {
			i -= len(x.TeamDelegated)
			copy(dAtA[i:], x.TeamDelegated)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TeamDelegated)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.SelfDelegated) > 0 {
			i -= len(x.SelfDelegated)
			copy(dAtA[i:], x.SelfDelegated)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SelfDelegated)))
			i--
			dAtA[i] = 0x4a
		}
		if x.StatusDowngradeAt != nil {
			encoded, err := options.Marshal(x.StatusDowngradeAt)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.ActiveRefCounts) > 0 {
			var pksize2 int
			for _, num := range x.ActiveRefCounts {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.ActiveRefCounts {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x3a
		}
		if x.Active {
			i--
			if x.Active {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x20
		}
		if len(x.Referrer) > 0 {
			i -= len(x.Referrer)
			copy(dAtA[i:], x.Referrer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Referrer)))
			i--
			dAtA[i] = 0x12
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Info)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Info: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= Status(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Referrer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Referrer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Active = bool(v != 0)
			case 7:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.ActiveRefCounts = append(x.ActiveRefCounts, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.ActiveRefCounts) == 0 {
						x.ActiveRefCounts = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.ActiveRefCounts = append(x.ActiveRefCounts, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ActiveRefCounts", wireType)
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StatusDowngradeAt", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.StatusDowngradeAt == nil {
					x.StatusDowngradeAt = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.StatusDowngradeAt); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SelfDelegated", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SelfDelegated = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TeamDelegated", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TeamDelegated = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ActiveCount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ActiveCount == nil {
					x.ActiveCount = &ActiveAggregations{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ActiveCount); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ActiveAggregations                protoreflect.MessageDescriptor
	fd_ActiveAggregations_first_line     protoreflect.FieldDescriptor
	fd_ActiveAggregations_first_line_by3 protoreflect.FieldDescriptor
	fd_ActiveAggregations_team0          protoreflect.FieldDescriptor
	fd_ActiveAggregations_team15         protoreflect.FieldDescriptor
	fd_ActiveAggregations_team50         protoreflect.FieldDescriptor
	fd_ActiveAggregations_team100        protoreflect.FieldDescriptor
	fd_ActiveAggregations_team300        protoreflect.FieldDescriptor
)

func init() {
	file_axiome_referral_v1beta1_types_proto_init()
	md_ActiveAggregations = File_axiome_referral_v1beta1_types_proto.Messages().ByName("ActiveAggregations")
	fd_ActiveAggregations_first_line = md_ActiveAggregations.Fields().ByName("first_line")
	fd_ActiveAggregations_first_line_by3 = md_ActiveAggregations.Fields().ByName("first_line_by3")
	fd_ActiveAggregations_team0 = md_ActiveAggregations.Fields().ByName("team0")
	fd_ActiveAggregations_team15 = md_ActiveAggregations.Fields().ByName("team15")
	fd_ActiveAggregations_team50 = md_ActiveAggregations.Fields().ByName("team50")
	fd_ActiveAggregations_team100 = md_ActiveAggregations.Fields().ByName("team100")
	fd_ActiveAggregations_team300 = md_ActiveAggregations.Fields().ByName("team300")
}

var _ protoreflect.Message = (*fastReflection_ActiveAggregations)(nil)

type fastReflection_ActiveAggregations ActiveAggregations

func (x *ActiveAggregations) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ActiveAggregations)(x)
}

func (x *ActiveAggregations) slowProtoReflect() protoreflect.Message {
	mi := &file_axiome_referral_v1beta1_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ActiveAggregations_messageType fastReflection_ActiveAggregations_messageType
var _ protoreflect.MessageType = fastReflection_ActiveAggregations_messageType{}

type fastReflection_ActiveAggregations_messageType struct{}

func (x fastReflection_ActiveAggregations_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ActiveAggregations)(nil)
}
func (x fastReflection_ActiveAggregations_messageType) New() protoreflect.Message {
	return new(fastReflection_ActiveAggregations)
}
func (x fastReflection_ActiveAggregations_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ActiveAggregations
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ActiveAggregations) Descriptor() protoreflect.MessageDescriptor {
	return md_ActiveAggregations
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ActiveAggregations) Type() protoreflect.MessageType {
	return _fastReflection_ActiveAggregations_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ActiveAggregations) New() protoreflect.Message {
	return new(fastReflection_ActiveAggregations)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ActiveAggregations) Interface() protoreflect.ProtoMessage {
	return (*ActiveAggregations)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ActiveAggregations) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.FirstLine != int32(0) {
		value := protoreflect.ValueOfInt32(x.FirstLine)
		if !f(fd_ActiveAggregations_first_line, value) {
			return
		}
	}
	if x.FirstLineBy3 != int32(0) {
		value := protoreflect.ValueOfInt32(x.FirstLineBy3)
		if !f(fd_ActiveAggregations_first_line_by3, value) {
			return
		}
	}
	if x.Team0 != int32(0) {
		value := protoreflect.ValueOfInt32(x.Team0)
		if !f(fd_ActiveAggregations_team0, value) {
			return
		}
	}
	if x.Team15 != int32(0) {
		value := protoreflect.ValueOfInt32(x.Team15)
		if !f(fd_ActiveAggregations_team15, value) {
			return
		}
	}
	if x.Team50 != int32(0) {
		value := protoreflect.ValueOfInt32(x.Team50)
		if !f(fd_ActiveAggregations_team50, value) {
			return
		}
	}
	if x.Team100 != int32(0) {
		value := protoreflect.ValueOfInt32(x.Team100)
		if !f(fd_ActiveAggregations_team100, value) {
			return
		}
	}
	if x.Team300 != int32(0) {
		value := protoreflect.ValueOfInt32(x.Team300)
		if !f(fd_ActiveAggregations_team300, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ActiveAggregations) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "axiome.referral.v1beta1.ActiveAggregations.first_line":
		return x.FirstLine != int32(0)
	case "axiome.referral.v1beta1.ActiveAggregations.first_line_by3":
		return x.FirstLineBy3 != int32(0)
	case "axiome.referral.v1beta1.ActiveAggregations.team0":
		return x.Team0 != int32(0)
	case "axiome.referral.v1beta1.ActiveAggregations.team15":
		return x.Team15 != int32(0)
	case "axiome.referral.v1beta1.ActiveAggregations.team50":
		return x.Team50 != int32(0)
	case "axiome.referral.v1beta1.ActiveAggregations.team100":
		return x.Team100 != int32(0)
	case "axiome.referral.v1beta1.ActiveAggregations.team300":
		return x.Team300 != int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.ActiveAggregations"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.ActiveAggregations does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ActiveAggregations) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "axiome.referral.v1beta1.ActiveAggregations.first_line":
		x.FirstLine = int32(0)
	case "axiome.referral.v1beta1.ActiveAggregations.first_line_by3":
		x.FirstLineBy3 = int32(0)
	case "axiome.referral.v1beta1.ActiveAggregations.team0":
		x.Team0 = int32(0)
	case "axiome.referral.v1beta1.ActiveAggregations.team15":
		x.Team15 = int32(0)
	case "axiome.referral.v1beta1.ActiveAggregations.team50":
		x.Team50 = int32(0)
	case "axiome.referral.v1beta1.ActiveAggregations.team100":
		x.Team100 = int32(0)
	case "axiome.referral.v1beta1.ActiveAggregations.team300":
		x.Team300 = int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.ActiveAggregations"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.ActiveAggregations does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ActiveAggregations) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "axiome.referral.v1beta1.ActiveAggregations.first_line":
		value := x.FirstLine
		return protoreflect.ValueOfInt32(value)
	case "axiome.referral.v1beta1.ActiveAggregations.first_line_by3":
		value := x.FirstLineBy3
		return protoreflect.ValueOfInt32(value)
	case "axiome.referral.v1beta1.ActiveAggregations.team0":
		value := x.Team0
		return protoreflect.ValueOfInt32(value)
	case "axiome.referral.v1beta1.ActiveAggregations.team15":
		value := x.Team15
		return protoreflect.ValueOfInt32(value)
	case "axiome.referral.v1beta1.ActiveAggregations.team50":
		value := x.Team50
		return protoreflect.ValueOfInt32(value)
	case "axiome.referral.v1beta1.ActiveAggregations.team100":
		value := x.Team100
		return protoreflect.ValueOfInt32(value)
	case "axiome.referral.v1beta1.ActiveAggregations.team300":
		value := x.Team300
		return protoreflect.ValueOfInt32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.ActiveAggregations"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.ActiveAggregations does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ActiveAggregations) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "axiome.referral.v1beta1.ActiveAggregations.first_line":
		x.FirstLine = int32(value.Int())
	case "axiome.referral.v1beta1.ActiveAggregations.first_line_by3":
		x.FirstLineBy3 = int32(value.Int())
	case "axiome.referral.v1beta1.ActiveAggregations.team0":
		x.Team0 = int32(value.Int())
	case "axiome.referral.v1beta1.ActiveAggregations.team15":
		x.Team15 = int32(value.Int())
	case "axiome.referral.v1beta1.ActiveAggregations.team50":
		x.Team50 = int32(value.Int())
	case "axiome.referral.v1beta1.ActiveAggregations.team100":
		x.Team100 = int32(value.Int())
	case "axiome.referral.v1beta1.ActiveAggregations.team300":
		x.Team300 = int32(value.Int())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.ActiveAggregations"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.ActiveAggregations does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ActiveAggregations) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "axiome.referral.v1beta1.ActiveAggregations.first_line":
		panic(fmt.Errorf("field first_line of message axiome.referral.v1beta1.ActiveAggregations is not mutable"))
	case "axiome.referral.v1beta1.ActiveAggregations.first_line_by3":
		panic(fmt.Errorf("field first_line_by3 of message axiome.referral.v1beta1.ActiveAggregations is not mutable"))
	case "axiome.referral.v1beta1.ActiveAggregations.team0":
		panic(fmt.Errorf("field team0 of message axiome.referral.v1beta1.ActiveAggregations is not mutable"))
	case "axiome.referral.v1beta1.ActiveAggregations.team15":
		panic(fmt.Errorf("field team15 of message axiome.referral.v1beta1.ActiveAggregations is not mutable"))
	case "axiome.referral.v1beta1.ActiveAggregations.team50":
		panic(fmt.Errorf("field team50 of message axiome.referral.v1beta1.ActiveAggregations is not mutable"))
	case "axiome.referral.v1beta1.ActiveAggregations.team100":
		panic(fmt.Errorf("field team100 of message axiome.referral.v1beta1.ActiveAggregations is not mutable"))
	case "axiome.referral.v1beta1.ActiveAggregations.team300":
		panic(fmt.Errorf("field team300 of message axiome.referral.v1beta1.ActiveAggregations is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.ActiveAggregations"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.ActiveAggregations does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ActiveAggregations) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "axiome.referral.v1beta1.ActiveAggregations.first_line":
		return protoreflect.ValueOfInt32(int32(0))
	case "axiome.referral.v1beta1.ActiveAggregations.first_line_by3":
		return protoreflect.ValueOfInt32(int32(0))
	case "axiome.referral.v1beta1.ActiveAggregations.team0":
		return protoreflect.ValueOfInt32(int32(0))
	case "axiome.referral.v1beta1.ActiveAggregations.team15":
		return protoreflect.ValueOfInt32(int32(0))
	case "axiome.referral.v1beta1.ActiveAggregations.team50":
		return protoreflect.ValueOfInt32(int32(0))
	case "axiome.referral.v1beta1.ActiveAggregations.team100":
		return protoreflect.ValueOfInt32(int32(0))
	case "axiome.referral.v1beta1.ActiveAggregations.team300":
		return protoreflect.ValueOfInt32(int32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.ActiveAggregations"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.ActiveAggregations does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ActiveAggregations) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in axiome.referral.v1beta1.ActiveAggregations", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ActiveAggregations) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ActiveAggregations) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ActiveAggregations) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ActiveAggregations) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ActiveAggregations)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.FirstLine != 0 {
			n += 1 + runtime.Sov(uint64(x.FirstLine))
		}
		if x.FirstLineBy3 != 0 {
			n += 1 + runtime.Sov(uint64(x.FirstLineBy3))
		}
		if x.Team0 != 0 {
			n += 1 + runtime.Sov(uint64(x.Team0))
		}
		if x.Team15 != 0 {
			n += 1 + runtime.Sov(uint64(x.Team15))
		}
		if x.Team50 != 0 {
			n += 1 + runtime.Sov(uint64(x.Team50))
		}
		if x.Team100 != 0 {
			n += 1 + runtime.Sov(uint64(x.Team100))
		}
		if x.Team300 != 0 {
			n += 1 + runtime.Sov(uint64(x.Team300))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ActiveAggregations)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Team300 != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Team300))
			i--
			dAtA[i] = 0x38
		}
		if x.Team100 != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Team100))
			i--
			dAtA[i] = 0x30
		}
		if x.Team50 != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Team50))
			i--
			dAtA[i] = 0x28
		}
		if x.Team15 != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Team15))
			i--
			dAtA[i] = 0x20
		}
		if x.Team0 != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Team0))
			i--
			dAtA[i] = 0x18
		}
		if x.FirstLineBy3 != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FirstLineBy3))
			i--
			dAtA[i] = 0x10
		}
		if x.FirstLine != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FirstLine))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ActiveAggregations)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ActiveAggregations: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ActiveAggregations: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FirstLine", wireType)
				}
				x.FirstLine = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FirstLine |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FirstLineBy3", wireType)
				}
				x.FirstLineBy3 = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FirstLineBy3 |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Team0", wireType)
				}
				x.Team0 = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Team0 |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Team15", wireType)
				}
				x.Team15 = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Team15 |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Team50", wireType)
				}
				x.Team50 = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Team50 |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Team100", wireType)
				}
				x.Team100 = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Team100 |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Team300", wireType)
				}
				x.Team300 = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Team300 |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_StatusCheckResult_2_list)(nil)

type _StatusCheckResult_2_list struct {
	list *[]*StatusCheckResult_Criterion
}

func (x *_StatusCheckResult_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_StatusCheckResult_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_StatusCheckResult_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*StatusCheckResult_Criterion)
	(*x.list)[i] = concreteValue
}

func (x *_StatusCheckResult_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*StatusCheckResult_Criterion)
	*x.list = append(*x.list, concreteValue)
}

func (x *_StatusCheckResult_2_list) AppendMutable() protoreflect.Value {
	v := new(StatusCheckResult_Criterion)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_StatusCheckResult_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_StatusCheckResult_2_list) NewElement() protoreflect.Value {
	v := new(StatusCheckResult_Criterion)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_StatusCheckResult_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_StatusCheckResult          protoreflect.MessageDescriptor
	fd_StatusCheckResult_overall  protoreflect.FieldDescriptor
	fd_StatusCheckResult_criteria protoreflect.FieldDescriptor
)

func init() {
	file_axiome_referral_v1beta1_types_proto_init()
	md_StatusCheckResult = File_axiome_referral_v1beta1_types_proto.Messages().ByName("StatusCheckResult")
	fd_StatusCheckResult_overall = md_StatusCheckResult.Fields().ByName("overall")
	fd_StatusCheckResult_criteria = md_StatusCheckResult.Fields().ByName("criteria")
}

var _ protoreflect.Message = (*fastReflection_StatusCheckResult)(nil)

type fastReflection_StatusCheckResult StatusCheckResult

func (x *StatusCheckResult) ProtoReflect() protoreflect.Message {
	return (*fastReflection_StatusCheckResult)(x)
}

func (x *StatusCheckResult) slowProtoReflect() protoreflect.Message {
	mi := &file_axiome_referral_v1beta1_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_StatusCheckResult_messageType fastReflection_StatusCheckResult_messageType
var _ protoreflect.MessageType = fastReflection_StatusCheckResult_messageType{}

type fastReflection_StatusCheckResult_messageType struct{}

func (x fastReflection_StatusCheckResult_messageType) Zero() protoreflect.Message {
	return (*fastReflection_StatusCheckResult)(nil)
}
func (x fastReflection_StatusCheckResult_messageType) New() protoreflect.Message {
	return new(fastReflection_StatusCheckResult)
}
func (x fastReflection_StatusCheckResult_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_StatusCheckResult
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_StatusCheckResult) Descriptor() protoreflect.MessageDescriptor {
	return md_StatusCheckResult
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_StatusCheckResult) Type() protoreflect.MessageType {
	return _fastReflection_StatusCheckResult_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_StatusCheckResult) New() protoreflect.Message {
	return new(fastReflection_StatusCheckResult)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_StatusCheckResult) Interface() protoreflect.ProtoMessage {
	return (*StatusCheckResult)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_StatusCheckResult) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Overall != false {
		value := protoreflect.ValueOfBool(x.Overall)
		if !f(fd_StatusCheckResult_overall, value) {
			return
		}
	}
	if len(x.Criteria) != 0 {
		value := protoreflect.ValueOfList(&_StatusCheckResult_2_list{list: &x.Criteria})
		if !f(fd_StatusCheckResult_criteria, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_StatusCheckResult) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "axiome.referral.v1beta1.StatusCheckResult.overall":
		return x.Overall != false
	case "axiome.referral.v1beta1.StatusCheckResult.criteria":
		return len(x.Criteria) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.StatusCheckResult"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.StatusCheckResult does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StatusCheckResult) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "axiome.referral.v1beta1.StatusCheckResult.overall":
		x.Overall = false
	case "axiome.referral.v1beta1.StatusCheckResult.criteria":
		x.Criteria = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.StatusCheckResult"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.StatusCheckResult does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_StatusCheckResult) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "axiome.referral.v1beta1.StatusCheckResult.overall":
		value := x.Overall
		return protoreflect.ValueOfBool(value)
	case "axiome.referral.v1beta1.StatusCheckResult.criteria":
		if len(x.Criteria) == 0 {
			return protoreflect.ValueOfList(&_StatusCheckResult_2_list{})
		}
		listValue := &_StatusCheckResult_2_list{list: &x.Criteria}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.StatusCheckResult"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.StatusCheckResult does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StatusCheckResult) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "axiome.referral.v1beta1.StatusCheckResult.overall":
		x.Overall = value.Bool()
	case "axiome.referral.v1beta1.StatusCheckResult.criteria":
		lv := value.List()
		clv := lv.(*_StatusCheckResult_2_list)
		x.Criteria = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.StatusCheckResult"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.StatusCheckResult does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StatusCheckResult) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "axiome.referral.v1beta1.StatusCheckResult.criteria":
		if x.Criteria == nil {
			x.Criteria = []*StatusCheckResult_Criterion{}
		}
		value := &_StatusCheckResult_2_list{list: &x.Criteria}
		return protoreflect.ValueOfList(value)
	case "axiome.referral.v1beta1.StatusCheckResult.overall":
		panic(fmt.Errorf("field overall of message axiome.referral.v1beta1.StatusCheckResult is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.StatusCheckResult"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.StatusCheckResult does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_StatusCheckResult) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "axiome.referral.v1beta1.StatusCheckResult.overall":
		return protoreflect.ValueOfBool(false)
	case "axiome.referral.v1beta1.StatusCheckResult.criteria":
		list := []*StatusCheckResult_Criterion{}
		return protoreflect.ValueOfList(&_StatusCheckResult_2_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.StatusCheckResult"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.StatusCheckResult does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_StatusCheckResult) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in axiome.referral.v1beta1.StatusCheckResult", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_StatusCheckResult) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StatusCheckResult) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_StatusCheckResult) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_StatusCheckResult) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*StatusCheckResult)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Overall {
			n += 2
		}
		if len(x.Criteria) > 0 {
			for _, e := range x.Criteria {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*StatusCheckResult)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Criteria) > 0 {
			for iNdEx := len(x.Criteria) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Criteria[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.Overall {
			i--
			if x.Overall {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*StatusCheckResult)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StatusCheckResult: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StatusCheckResult: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Overall", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Overall = bool(v != 0)
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Criteria", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Criteria = append(x.Criteria, &StatusCheckResult_Criterion{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Criteria[len(x.Criteria)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_StatusCheckResult_Criterion              protoreflect.MessageDescriptor
	fd_StatusCheckResult_Criterion_met          protoreflect.FieldDescriptor
	fd_StatusCheckResult_Criterion_rule         protoreflect.FieldDescriptor
	fd_StatusCheckResult_Criterion_target_value protoreflect.FieldDescriptor
	fd_StatusCheckResult_Criterion_actual_value protoreflect.FieldDescriptor
	fd_StatusCheckResult_Criterion_parameter_x  protoreflect.FieldDescriptor
)

func init() {
	file_axiome_referral_v1beta1_types_proto_init()
	md_StatusCheckResult_Criterion = File_axiome_referral_v1beta1_types_proto.Messages().ByName("StatusCheckResult").Messages().ByName("Criterion")
	fd_StatusCheckResult_Criterion_met = md_StatusCheckResult_Criterion.Fields().ByName("met")
	fd_StatusCheckResult_Criterion_rule = md_StatusCheckResult_Criterion.Fields().ByName("rule")
	fd_StatusCheckResult_Criterion_target_value = md_StatusCheckResult_Criterion.Fields().ByName("target_value")
	fd_StatusCheckResult_Criterion_actual_value = md_StatusCheckResult_Criterion.Fields().ByName("actual_value")
	fd_StatusCheckResult_Criterion_parameter_x = md_StatusCheckResult_Criterion.Fields().ByName("parameter_x")
}

var _ protoreflect.Message = (*fastReflection_StatusCheckResult_Criterion)(nil)

type fastReflection_StatusCheckResult_Criterion StatusCheckResult_Criterion

func (x *StatusCheckResult_Criterion) ProtoReflect() protoreflect.Message {
	return (*fastReflection_StatusCheckResult_Criterion)(x)
}

func (x *StatusCheckResult_Criterion) slowProtoReflect() protoreflect.Message {
	mi := &file_axiome_referral_v1beta1_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_StatusCheckResult_Criterion_messageType fastReflection_StatusCheckResult_Criterion_messageType
var _ protoreflect.MessageType = fastReflection_StatusCheckResult_Criterion_messageType{}

type fastReflection_StatusCheckResult_Criterion_messageType struct{}

func (x fastReflection_StatusCheckResult_Criterion_messageType) Zero() protoreflect.Message {
	return (*fastReflection_StatusCheckResult_Criterion)(nil)
}
func (x fastReflection_StatusCheckResult_Criterion_messageType) New() protoreflect.Message {
	return new(fastReflection_StatusCheckResult_Criterion)
}
func (x fastReflection_StatusCheckResult_Criterion_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_StatusCheckResult_Criterion
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_StatusCheckResult_Criterion) Descriptor() protoreflect.MessageDescriptor {
	return md_StatusCheckResult_Criterion
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_StatusCheckResult_Criterion) Type() protoreflect.MessageType {
	return _fastReflection_StatusCheckResult_Criterion_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_StatusCheckResult_Criterion) New() protoreflect.Message {
	return new(fastReflection_StatusCheckResult_Criterion)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_StatusCheckResult_Criterion) Interface() protoreflect.ProtoMessage {
	return (*StatusCheckResult_Criterion)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_StatusCheckResult_Criterion) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Met != false {
		value := protoreflect.ValueOfBool(x.Met)
		if !f(fd_StatusCheckResult_Criterion_met, value) {
			return
		}
	}
	if x.Rule != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Rule))
		if !f(fd_StatusCheckResult_Criterion_rule, value) {
			return
		}
	}
	if x.TargetValue != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TargetValue)
		if !f(fd_StatusCheckResult_Criterion_target_value, value) {
			return
		}
	}
	if x.ActualValue != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ActualValue)
		if !f(fd_StatusCheckResult_Criterion_actual_value, value) {
			return
		}
	}
	if x.ParameterX != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ParameterX)
		if !f(fd_StatusCheckResult_Criterion_parameter_x, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_StatusCheckResult_Criterion) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.met":
		return x.Met != false
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.rule":
		return x.Rule != 0
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.target_value":
		return x.TargetValue != uint64(0)
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.actual_value":
		return x.ActualValue != uint64(0)
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.parameter_x":
		return x.ParameterX != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.StatusCheckResult.Criterion"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.StatusCheckResult.Criterion does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StatusCheckResult_Criterion) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.met":
		x.Met = false
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.rule":
		x.Rule = 0
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.target_value":
		x.TargetValue = uint64(0)
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.actual_value":
		x.ActualValue = uint64(0)
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.parameter_x":
		x.ParameterX = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.StatusCheckResult.Criterion"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.StatusCheckResult.Criterion does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_StatusCheckResult_Criterion) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.met":
		value := x.Met
		return protoreflect.ValueOfBool(value)
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.rule":
		value := x.Rule
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.target_value":
		value := x.TargetValue
		return protoreflect.ValueOfUint64(value)
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.actual_value":
		value := x.ActualValue
		return protoreflect.ValueOfUint64(value)
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.parameter_x":
		value := x.ParameterX
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.StatusCheckResult.Criterion"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.StatusCheckResult.Criterion does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StatusCheckResult_Criterion) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.met":
		x.Met = value.Bool()
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.rule":
		x.Rule = (StatusCheckResult_Criterion_Rule)(value.Enum())
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.target_value":
		x.TargetValue = value.Uint()
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.actual_value":
		x.ActualValue = value.Uint()
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.parameter_x":
		x.ParameterX = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.StatusCheckResult.Criterion"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.StatusCheckResult.Criterion does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StatusCheckResult_Criterion) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.met":
		panic(fmt.Errorf("field met of message axiome.referral.v1beta1.StatusCheckResult.Criterion is not mutable"))
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.rule":
		panic(fmt.Errorf("field rule of message axiome.referral.v1beta1.StatusCheckResult.Criterion is not mutable"))
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.target_value":
		panic(fmt.Errorf("field target_value of message axiome.referral.v1beta1.StatusCheckResult.Criterion is not mutable"))
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.actual_value":
		panic(fmt.Errorf("field actual_value of message axiome.referral.v1beta1.StatusCheckResult.Criterion is not mutable"))
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.parameter_x":
		panic(fmt.Errorf("field parameter_x of message axiome.referral.v1beta1.StatusCheckResult.Criterion is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.StatusCheckResult.Criterion"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.StatusCheckResult.Criterion does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_StatusCheckResult_Criterion) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.met":
		return protoreflect.ValueOfBool(false)
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.rule":
		return protoreflect.ValueOfEnum(0)
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.target_value":
		return protoreflect.ValueOfUint64(uint64(0))
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.actual_value":
		return protoreflect.ValueOfUint64(uint64(0))
	case "axiome.referral.v1beta1.StatusCheckResult.Criterion.parameter_x":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.referral.v1beta1.StatusCheckResult.Criterion"))
		}
		panic(fmt.Errorf("message axiome.referral.v1beta1.StatusCheckResult.Criterion does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_StatusCheckResult_Criterion) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in axiome.referral.v1beta1.StatusCheckResult.Criterion", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_StatusCheckResult_Criterion) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StatusCheckResult_Criterion) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_StatusCheckResult_Criterion) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_StatusCheckResult_Criterion) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*StatusCheckResult_Criterion)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Met {
			n += 2
		}
		if x.Rule != 0 {
			n += 1 + runtime.Sov(uint64(x.Rule))
		}
		if x.TargetValue != 0 {
			n += 1 + runtime.Sov(uint64(x.TargetValue))
		}
		if x.ActualValue != 0 {
			n += 1 + runtime.Sov(uint64(x.ActualValue))
		}
		if x.ParameterX != 0 {
			n += 1 + runtime.Sov(uint64(x.ParameterX))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*StatusCheckResult_Criterion)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ParameterX != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ParameterX))
			i--
			dAtA[i] = 0x28
		}
		if x.ActualValue != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ActualValue))
			i--
			dAtA[i] = 0x20
		}
		if x.TargetValue != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TargetValue))
			i--
			dAtA[i] = 0x18
		}
		if x.Rule != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Rule))
			i--
			dAtA[i] = 0x10
		}
		if x.Met {
			i--
			if x.Met {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*StatusCheckResult_Criterion)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StatusCheckResult_Criterion: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StatusCheckResult_Criterion: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Met", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Met = bool(v != 0)
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
				}
				x.Rule = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Rule |= StatusCheckResult_Criterion_Rule(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TargetValue", wireType)
				}
				x.TargetValue = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TargetValue |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ActualValue", wireType)
				}
				x.ActualValue = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ActualValue |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ParameterX", wireType)
				}
				x.ParameterX = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ParameterX |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: axiome/referral/v1beta1/types.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_STATUS_UNSPECIFIED Status = 0
	Status_STATUS_NEW         Status = 1
	Status_STATUS_STARTER     Status = 2
	Status_STATUS_LEADER      Status = 3
	Status_STATUS_GURU        Status = 4
	Status_STATUS_BOSS        Status = 5
	Status_STATUS_PRO         Status = 6
	Status_STATUS_TOP         Status = 7
	Status_STATUS_MEGA        Status = 8
	Status_STATUS_DEPRECATED  Status = 9
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_NEW",
		2: "STATUS_STARTER",
		3: "STATUS_LEADER",
		4: "STATUS_GURU",
		5: "STATUS_BOSS",
		6: "STATUS_PRO",
		7: "STATUS_TOP",
		8: "STATUS_MEGA",
		9: "STATUS_DEPRECATED",
	}
	Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_NEW":         1,
		"STATUS_STARTER":     2,
		"STATUS_LEADER":      3,
		"STATUS_GURU":        4,
		"STATUS_BOSS":        5,
		"STATUS_PRO":         6,
		"STATUS_TOP":         7,
		"STATUS_MEGA":        8,
		"STATUS_DEPRECATED":  9,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_axiome_referral_v1beta1_types_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_axiome_referral_v1beta1_types_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_axiome_referral_v1beta1_types_proto_rawDescGZIP(), []int{0}
}

type StatusCheckResult_Criterion_Rule int32

const (
	StatusCheckResult_Criterion_RULE_UNSPECIFIED                       StatusCheckResult_Criterion_Rule = 0
	StatusCheckResult_Criterion_RULE_N_REFERRALS_WITH_X_REFERRALS_EACH StatusCheckResult_Criterion_Rule = 1
	StatusCheckResult_Criterion_RULE_N_COINS_IN_STRUCTURE              StatusCheckResult_Criterion_Rule = 2
	StatusCheckResult_Criterion_RULE_N_TEAMS_OF_X_PEOPLE_EACH          StatusCheckResult_Criterion_Rule = 3
	StatusCheckResult_Criterion_RULE_PARTICIPATE_IN_REFERRAL_PROGRAM   StatusCheckResult_Criterion_Rule = 4
	StatusCheckResult_Criterion_RULE_SELF_STAKE                        StatusCheckResult_Criterion_Rule = 5
)

// Enum value maps for StatusCheckResult_Criterion_Rule.
var (
	StatusCheckResult_Criterion_Rule_name = map[int32]string{
		0: "RULE_UNSPECIFIED",
		1: "RULE_N_REFERRALS_WITH_X_REFERRALS_EACH",
		2: "RULE_N_COINS_IN_STRUCTURE",
		3: "RULE_N_TEAMS_OF_X_PEOPLE_EACH",
		4: "RULE_PARTICIPATE_IN_REFERRAL_PROGRAM",
		5: "RULE_SELF_STAKE",
	}
	StatusCheckResult_Criterion_Rule_value = map[string]int32{
		"RULE_UNSPECIFIED":                       0,
		"RULE_N_REFERRALS_WITH_X_REFERRALS_EACH": 1,
		"RULE_N_COINS_IN_STRUCTURE":              2,
		"RULE_N_TEAMS_OF_X_PEOPLE_EACH":          3,
		"RULE_PARTICIPATE_IN_REFERRAL_PROGRAM":   4,
		"RULE_SELF_STAKE":                        5,
	}
)

func (x StatusCheckResult_Criterion_Rule) Enum() *StatusCheckResult_Criterion_Rule {
	p := new(StatusCheckResult_Criterion_Rule)
	*p = x
	return p
}

func (x StatusCheckResult_Criterion_Rule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCheckResult_Criterion_Rule) Descriptor() protoreflect.EnumDescriptor {
	return file_axiome_referral_v1beta1_types_proto_enumTypes[1].Descriptor()
}

func (StatusCheckResult_Criterion_Rule) Type() protoreflect.EnumType {
	return &file_axiome_referral_v1beta1_types_proto_enumTypes[1]
}

func (x StatusCheckResult_Criterion_Rule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCheckResult_Criterion_Rule.Descriptor instead.
func (StatusCheckResult_Criterion_Rule) EnumDescriptor() ([]byte, []int) {
	return file_axiome_referral_v1beta1_types_proto_rawDescGZIP(), []int{2, 0, 0}
}

type Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status - account status
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=axiome.referral.v1beta1.Status" json:"status,omitempty"`
	// Referrer - parent, account just above this one.
	Referrer string `protobuf:"bytes,2,opt,name=referrer,proto3" json:"referrer,omitempty"`
	// Active - does the account keeper have a paid subscription.
	Active bool `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	// ActiveRefCounts - count of active referrals per level (up to 14 levels
	// deep). And so on. ActiveReferrals[0] represents an account itself. It must
	// be equal 1 if account is active, and 0 if it's not.
	ActiveRefCounts   []uint64               `protobuf:"varint,7,rep,packed,name=active_ref_counts,json=activeRefCounts,proto3" json:"active_ref_counts,omitempty"`
	StatusDowngradeAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=status_downgrade_at,json=statusDowngradeAt,proto3" json:"status_downgrade_at,omitempty"`
	SelfDelegated     string                 `protobuf:"bytes,9,opt,name=self_delegated,json=selfDelegated,proto3" json:"self_delegated,omitempty"`
	TeamDelegated     string                 `protobuf:"bytes,10,opt,name=team_delegated,json=teamDelegated,proto3" json:"team_delegated,omitempty"`
	ActiveCount       *ActiveAggregations    `protobuf:"bytes,11,opt,name=active_count,json=activeCount,proto3" json:"active_count,omitempty"`
}

func (x *Info) Reset() {
	*x = Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_axiome_referral_v1beta1_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_axiome_referral_v1beta1_types_proto_rawDescGZIP(), []int{0}
}

func (x *Info) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_UNSPECIFIED
}

func (x *Info) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *Info) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Info) GetActiveRefCounts() []uint64 {
	if x != nil {
		return x.ActiveRefCounts
	}
	return nil
}

func (x *Info) GetStatusDowngradeAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusDowngradeAt
	}
	return nil
}

func (x *Info) GetSelfDelegated() string {
	if x != nil {
		return x.SelfDelegated
	}
	return ""
}

func (x *Info) GetTeamDelegated() string {
	if x != nil {
		return x.TeamDelegated
	}
	return ""
}

func (x *Info) GetActiveCount() *ActiveAggregations {
	if x != nil {
		return x.ActiveCount
	}
	return nil
}

type ActiveAggregations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstLine    int32 `protobuf:"varint,1,opt,name=first_line,json=firstLine,proto3" json:"first_line,omitempty"`
	FirstLineBy3 int32 `protobuf:"varint,2,opt,name=first_line_by3,json=firstLineBy3,proto3" json:"first_line_by3,omitempty"`
	Team0        int32 `protobuf:"varint,3,opt,name=team0,proto3" json:"team0,omitempty"`
	Team15       int32 `protobuf:"varint,4,opt,name=team15,proto3" json:"team15,omitempty"`
	Team50       int32 `protobuf:"varint,5,opt,name=team50,proto3" json:"team50,omitempty"`
	Team100      int32 `protobuf:"varint,6,opt,name=team100,proto3" json:"team100,omitempty"`
	Team300      int32 `protobuf:"varint,7,opt,name=team300,proto3" json:"team300,omitempty"`
}

func (x *ActiveAggregations) Reset() {
	*x = ActiveAggregations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_axiome_referral_v1beta1_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveAggregations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveAggregations) ProtoMessage() {}

// Deprecated: Use ActiveAggregations.ProtoReflect.Descriptor instead.
func (*ActiveAggregations) Descriptor() ([]byte, []int) {
	return file_axiome_referral_v1beta1_types_proto_rawDescGZIP(), []int{1}
}

func (x *ActiveAggregations) GetFirstLine() int32 {
	if x != nil {
		return x.FirstLine
	}
	return 0
}

func (x *ActiveAggregations) GetFirstLineBy3() int32 {
	if x != nil {
		return x.FirstLineBy3
	}
	return 0
}

func (x *ActiveAggregations) GetTeam0() int32 {
	if x != nil {
		return x.Team0
	}
	return 0
}

func (x *ActiveAggregations) GetTeam15() int32 {
	if x != nil {
		return x.Team15
	}
	return 0
}

func (x *ActiveAggregations) GetTeam50() int32 {
	if x != nil {
		return x.Team50
	}
	return 0
}

func (x *ActiveAggregations) GetTeam100() int32 {
	if x != nil {
		return x.Team100
	}
	return 0
}

func (x *ActiveAggregations) GetTeam300() int32 {
	if x != nil {
		return x.Team300
	}
	return 0
}

type StatusCheckResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Overall  bool                           `protobuf:"varint,1,opt,name=overall,proto3" json:"overall,omitempty"`
	Criteria []*StatusCheckResult_Criterion `protobuf:"bytes,2,rep,name=criteria,proto3" json:"criteria,omitempty"`
}

func (x *StatusCheckResult) Reset() {
	*x = StatusCheckResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_axiome_referral_v1beta1_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusCheckResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusCheckResult) ProtoMessage() {}

// Deprecated: Use StatusCheckResult.ProtoReflect.Descriptor instead.
func (*StatusCheckResult) Descriptor() ([]byte, []int) {
	return file_axiome_referral_v1beta1_types_proto_rawDescGZIP(), []int{2}
}

func (x *StatusCheckResult) GetOverall() bool {
	if x != nil {
		return x.Overall
	}
	return false
}

func (x *StatusCheckResult) GetCriteria() []*StatusCheckResult_Criterion {
	if x != nil {
		return x.Criteria
	}
	return nil
}

type StatusCheckResult_Criterion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Met         bool                             `protobuf:"varint,1,opt,name=met,proto3" json:"met,omitempty"`
	Rule        StatusCheckResult_Criterion_Rule `protobuf:"varint,2,opt,name=rule,proto3,enum=axiome.referral.v1beta1.StatusCheckResult_Criterion_Rule" json:"rule,omitempty"`
	TargetValue uint64                           `protobuf:"varint,3,opt,name=target_value,json=targetValue,proto3" json:"target_value,omitempty"`
	ActualValue uint64                           `protobuf:"varint,4,opt,name=actual_value,json=actualValue,proto3" json:"actual_value,omitempty"`
	ParameterX  uint64                           `protobuf:"varint,5,opt,name=parameter_x,json=parameterX,proto3" json:"parameter_x,omitempty"`
}

func (x *StatusCheckResult_Criterion) Reset() {
	*x = StatusCheckResult_Criterion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_axiome_referral_v1beta1_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusCheckResult_Criterion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusCheckResult_Criterion) ProtoMessage() {}

// Deprecated: Use StatusCheckResult_Criterion.ProtoReflect.Descriptor instead.
func (*StatusCheckResult_Criterion) Descriptor() ([]byte, []int) {
	return file_axiome_referral_v1beta1_types_proto_rawDescGZIP(), []int{2, 0}
}

func (x *StatusCheckResult_Criterion) GetMet() bool {
	if x != nil {
		return x.Met
	}
	return false
}

func (x *StatusCheckResult_Criterion) GetRule() StatusCheckResult_Criterion_Rule {
	if x != nil {
		return x.Rule
	}
	return StatusCheckResult_Criterion_RULE_UNSPECIFIED
}

func (x *StatusCheckResult_Criterion) GetTargetValue() uint64 {
	if x != nil {
		return x.TargetValue
	}
	return 0
}

func (x *StatusCheckResult_Criterion) GetActualValue() uint64 {
	if x != nil {
		return x.ActualValue
	}
	return 0
}

func (x *StatusCheckResult_Criterion) GetParameterX() uint64 {
	if x != nil {
		return x.ParameterX
	}
	return 0
}

var File_axiome_referral_v1beta1_types_proto protoreflect.FileDescriptor

var file_axiome_referral_v1beta1_types_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x65, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x65, 0x2e, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x14,
	0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa2, 0x06, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x78, 0x69, 0x6f,
	0x6d, 0x65, 0x2e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x1b, 0xea, 0xde, 0x1f, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xf2, 0xde, 0x1f, 0x0d, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x4f, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x33, 0xea, 0xde, 0x1f, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x19, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72,
	0x12, 0x33, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x1b, 0xea, 0xde, 0x1f, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0xf2, 0xde, 0x1f, 0x0d,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04,
	0x42, 0x36, 0xea, 0xde, 0x1f, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0xf2, 0xde, 0x1f, 0x1d, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2c, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x13, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x51, 0xc8, 0xde, 0x1f, 0x01, 0xea, 0xde, 0x1f, 0x1d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x74,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x24, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x6f,
	0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x74, 0x12, 0x6b, 0x0a, 0x0e, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x44, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xea, 0xde, 0x1f, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0xf2, 0xde, 0x1f, 0x1a, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x2c, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x6b, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44,
	0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xea, 0xde, 0x1f, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0xf2, 0xde, 0x1f, 0x1a, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x2c, 0x66,
	0x6c, 0x6f, 0x77, 0x22, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x78, 0x69, 0x6f,
	0x6d, 0x65, 0x2e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a,
	0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0xd9, 0x01, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x79, 0x33, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x42, 0x79,
	0x33, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x31,
	0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x35, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x35, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x35, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x31,
	0x30, 0x30, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x30,
	0x30, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x33, 0x30, 0x30, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x33, 0x30, 0x30, 0x3a, 0x04, 0x88, 0xa0, 0x1f,
	0x00, 0x22, 0xbf, 0x04, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c,
	0x6c, 0x12, 0x56, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x65, 0x2e, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x1a, 0xa5, 0x03, 0x0a, 0x09, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6d, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x65,
	0x2e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x58, 0x22,
	0xcf, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x55, 0x4c, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a,
	0x0a, 0x26, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4e, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41,
	0x4c, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x58, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52,
	0x41, 0x4c, 0x53, 0x5f, 0x45, 0x41, 0x43, 0x48, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x55,
	0x4c, 0x45, 0x5f, 0x4e, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x54,
	0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x55, 0x4c,
	0x45, 0x5f, 0x4e, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x53, 0x5f, 0x4f, 0x46, 0x5f, 0x58, 0x5f, 0x50,
	0x45, 0x4f, 0x50, 0x4c, 0x45, 0x5f, 0x45, 0x41, 0x43, 0x48, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24,
	0x52, 0x55, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x41, 0x4d, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x53,
	0x45, 0x4c, 0x46, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x10, 0x05, 0x1a, 0x04, 0x88, 0xa3, 0x1e,
	0x00, 0x3a, 0x10, 0x88, 0xa0, 0x1f, 0x00, 0xd0, 0xa1, 0x1f, 0x00, 0x90, 0xa2, 0x1f, 0x00, 0x98,
	0xa2, 0x1f, 0x00, 0x2a, 0xc7, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x47, 0x55, 0x52, 0x55, 0x10, 0x04, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x10, 0x05, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x10, 0x06, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x07, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x45, 0x47, 0x41, 0x10, 0x08,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45,
	0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x09, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42, 0xf1, 0x01,
	0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x65, 0x2e, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0a, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x62, 0x69, 0x74,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x6e, 0x33, 0x64,
	0x2f, 0x61, 0x78, 0x6d, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x78,
	0x69, 0x6f, 0x6d, 0x65, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x52, 0x58, 0xaa, 0x02, 0x17, 0x41, 0x78,
	0x69, 0x6f, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x56, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x17, 0x41, 0x78, 0x69, 0x6f, 0x6d, 0x65, 0x5c, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2,
	0x02, 0x23, 0x41, 0x78, 0x69, 0x6f, 0x6d, 0x65, 0x5c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x41, 0x78, 0x69, 0x6f, 0x6d, 0x65, 0x3a, 0x3a,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_axiome_referral_v1beta1_types_proto_rawDescOnce sync.Once
	file_axiome_referral_v1beta1_types_proto_rawDescData = file_axiome_referral_v1beta1_types_proto_rawDesc
)

func file_axiome_referral_v1beta1_types_proto_rawDescGZIP() []byte {
	file_axiome_referral_v1beta1_types_proto_rawDescOnce.Do(func() {
		file_axiome_referral_v1beta1_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_axiome_referral_v1beta1_types_proto_rawDescData)
	})
	return file_axiome_referral_v1beta1_types_proto_rawDescData
}

var file_axiome_referral_v1beta1_types_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_axiome_referral_v1beta1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_axiome_referral_v1beta1_types_proto_goTypes = []interface{}{
	(Status)(0),                           // 0: axiome.referral.v1beta1.Status
	(StatusCheckResult_Criterion_Rule)(0), // 1: axiome.referral.v1beta1.StatusCheckResult.Criterion.Rule
	(*Info)(nil),                          // 2: axiome.referral.v1beta1.Info
	(*ActiveAggregations)(nil),            // 3: axiome.referral.v1beta1.ActiveAggregations
	(*StatusCheckResult)(nil),             // 4: axiome.referral.v1beta1.StatusCheckResult
	(*StatusCheckResult_Criterion)(nil),   // 5: axiome.referral.v1beta1.StatusCheckResult.Criterion
	(*timestamppb.Timestamp)(nil),         // 6: google.protobuf.Timestamp
}
var file_axiome_referral_v1beta1_types_proto_depIdxs = []int32{
	0, // 0: axiome.referral.v1beta1.Info.status:type_name -> axiome.referral.v1beta1.Status
	6, // 1: axiome.referral.v1beta1.Info.status_downgrade_at:type_name -> google.protobuf.Timestamp
	3, // 2: axiome.referral.v1beta1.Info.active_count:type_name -> axiome.referral.v1beta1.ActiveAggregations
	5, // 3: axiome.referral.v1beta1.StatusCheckResult.criteria:type_name -> axiome.referral.v1beta1.StatusCheckResult.Criterion
	1, // 4: axiome.referral.v1beta1.StatusCheckResult.Criterion.rule:type_name -> axiome.referral.v1beta1.StatusCheckResult.Criterion.Rule
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_axiome_referral_v1beta1_types_proto_init() }
func file_axiome_referral_v1beta1_types_proto_init() {
	if File_axiome_referral_v1beta1_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_axiome_referral_v1beta1_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_axiome_referral_v1beta1_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveAggregations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_axiome_referral_v1beta1_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusCheckResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_axiome_referral_v1beta1_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusCheckResult_Criterion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_axiome_referral_v1beta1_types_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_axiome_referral_v1beta1_types_proto_goTypes,
		DependencyIndexes: file_axiome_referral_v1beta1_types_proto_depIdxs,
		EnumInfos:         file_axiome_referral_v1beta1_types_proto_enumTypes,
		MessageInfos:      file_axiome_referral_v1beta1_types_proto_msgTypes,
	}.Build()
	File_axiome_referral_v1beta1_types_proto = out.File
	file_axiome_referral_v1beta1_types_proto_rawDesc = nil
	file_axiome_referral_v1beta1_types_proto_goTypes = nil
	file_axiome_referral_v1beta1_types_proto_depIdxs = nil
}
