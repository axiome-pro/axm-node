// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package votev1beta1

import (
	v1beta1 "github.com/axiome-pro/axm-node/api/axiome/referral/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Proposal_3_list)(nil)

type _Proposal_3_list struct {
	list *[]*anypb.Any
}

func (x *_Proposal_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Proposal_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Proposal_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*anypb.Any)
	(*x.list)[i] = concreteValue
}

func (x *_Proposal_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*anypb.Any)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Proposal_3_list) AppendMutable() protoreflect.Value {
	v := new(anypb.Any)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Proposal_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Proposal_3_list) NewElement() protoreflect.Value {
	v := new(anypb.Any)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Proposal_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Proposal          protoreflect.MessageDescriptor
	fd_Proposal_name     protoreflect.FieldDescriptor
	fd_Proposal_author   protoreflect.FieldDescriptor
	fd_Proposal_messages protoreflect.FieldDescriptor
	fd_Proposal_end_time protoreflect.FieldDescriptor
)

func init() {
	file_axiome_vote_v1beta1_types_proto_init()
	md_Proposal = File_axiome_vote_v1beta1_types_proto.Messages().ByName("Proposal")
	fd_Proposal_name = md_Proposal.Fields().ByName("name")
	fd_Proposal_author = md_Proposal.Fields().ByName("author")
	fd_Proposal_messages = md_Proposal.Fields().ByName("messages")
	fd_Proposal_end_time = md_Proposal.Fields().ByName("end_time")
}

var _ protoreflect.Message = (*fastReflection_Proposal)(nil)

type fastReflection_Proposal Proposal

func (x *Proposal) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Proposal)(x)
}

func (x *Proposal) slowProtoReflect() protoreflect.Message {
	mi := &file_axiome_vote_v1beta1_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Proposal_messageType fastReflection_Proposal_messageType
var _ protoreflect.MessageType = fastReflection_Proposal_messageType{}

type fastReflection_Proposal_messageType struct{}

func (x fastReflection_Proposal_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Proposal)(nil)
}
func (x fastReflection_Proposal_messageType) New() protoreflect.Message {
	return new(fastReflection_Proposal)
}
func (x fastReflection_Proposal_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Proposal
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Proposal) Descriptor() protoreflect.MessageDescriptor {
	return md_Proposal
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Proposal) Type() protoreflect.MessageType {
	return _fastReflection_Proposal_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Proposal) New() protoreflect.Message {
	return new(fastReflection_Proposal)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Proposal) Interface() protoreflect.ProtoMessage {
	return (*Proposal)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Proposal) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_Proposal_name, value) {
			return
		}
	}
	if x.Author != "" {
		value := protoreflect.ValueOfString(x.Author)
		if !f(fd_Proposal_author, value) {
			return
		}
	}
	if len(x.Messages) != 0 {
		value := protoreflect.ValueOfList(&_Proposal_3_list{list: &x.Messages})
		if !f(fd_Proposal_messages, value) {
			return
		}
	}
	if x.EndTime != nil {
		value := protoreflect.ValueOfMessage(x.EndTime.ProtoReflect())
		if !f(fd_Proposal_end_time, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Proposal) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.Proposal.name":
		return x.Name != ""
	case "axiome.vote.v1beta1.Proposal.author":
		return x.Author != ""
	case "axiome.vote.v1beta1.Proposal.messages":
		return len(x.Messages) != 0
	case "axiome.vote.v1beta1.Proposal.end_time":
		return x.EndTime != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Proposal"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Proposal does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Proposal) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.Proposal.name":
		x.Name = ""
	case "axiome.vote.v1beta1.Proposal.author":
		x.Author = ""
	case "axiome.vote.v1beta1.Proposal.messages":
		x.Messages = nil
	case "axiome.vote.v1beta1.Proposal.end_time":
		x.EndTime = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Proposal"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Proposal does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Proposal) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "axiome.vote.v1beta1.Proposal.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "axiome.vote.v1beta1.Proposal.author":
		value := x.Author
		return protoreflect.ValueOfString(value)
	case "axiome.vote.v1beta1.Proposal.messages":
		if len(x.Messages) == 0 {
			return protoreflect.ValueOfList(&_Proposal_3_list{})
		}
		listValue := &_Proposal_3_list{list: &x.Messages}
		return protoreflect.ValueOfList(listValue)
	case "axiome.vote.v1beta1.Proposal.end_time":
		value := x.EndTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Proposal"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Proposal does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Proposal) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.Proposal.name":
		x.Name = value.Interface().(string)
	case "axiome.vote.v1beta1.Proposal.author":
		x.Author = value.Interface().(string)
	case "axiome.vote.v1beta1.Proposal.messages":
		lv := value.List()
		clv := lv.(*_Proposal_3_list)
		x.Messages = *clv.list
	case "axiome.vote.v1beta1.Proposal.end_time":
		x.EndTime = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Proposal"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Proposal does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Proposal) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.Proposal.messages":
		if x.Messages == nil {
			x.Messages = []*anypb.Any{}
		}
		value := &_Proposal_3_list{list: &x.Messages}
		return protoreflect.ValueOfList(value)
	case "axiome.vote.v1beta1.Proposal.end_time":
		if x.EndTime == nil {
			x.EndTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.EndTime.ProtoReflect())
	case "axiome.vote.v1beta1.Proposal.name":
		panic(fmt.Errorf("field name of message axiome.vote.v1beta1.Proposal is not mutable"))
	case "axiome.vote.v1beta1.Proposal.author":
		panic(fmt.Errorf("field author of message axiome.vote.v1beta1.Proposal is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Proposal"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Proposal does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Proposal) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.Proposal.name":
		return protoreflect.ValueOfString("")
	case "axiome.vote.v1beta1.Proposal.author":
		return protoreflect.ValueOfString("")
	case "axiome.vote.v1beta1.Proposal.messages":
		list := []*anypb.Any{}
		return protoreflect.ValueOfList(&_Proposal_3_list{list: &list})
	case "axiome.vote.v1beta1.Proposal.end_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Proposal"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Proposal does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Proposal) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in axiome.vote.v1beta1.Proposal", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Proposal) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Proposal) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Proposal) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Proposal) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Proposal)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Author)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Messages) > 0 {
			for _, e := range x.Messages {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.EndTime != nil {
			l = options.Size(x.EndTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Proposal)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.EndTime != nil {
			encoded, err := options.Marshal(x.EndTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Messages) > 0 {
			for iNdEx := len(x.Messages) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Messages[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.Author) > 0 {
			i -= len(x.Author)
			copy(dAtA[i:], x.Author)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Author)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Proposal)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Proposal: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Proposal: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Author = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Messages = append(x.Messages, &anypb.Any{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Messages[len(x.Messages)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EndTime == nil {
					x.EndTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EndTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_ProposalHistoryRecord_2_list)(nil)

type _ProposalHistoryRecord_2_list struct {
	list *[]string
}

func (x *_ProposalHistoryRecord_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ProposalHistoryRecord_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_ProposalHistoryRecord_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ProposalHistoryRecord_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ProposalHistoryRecord_2_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ProposalHistoryRecord at list field Government as it is not of Message kind"))
}

func (x *_ProposalHistoryRecord_2_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ProposalHistoryRecord_2_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_ProposalHistoryRecord_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_ProposalHistoryRecord_3_list)(nil)

type _ProposalHistoryRecord_3_list struct {
	list *[]string
}

func (x *_ProposalHistoryRecord_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ProposalHistoryRecord_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_ProposalHistoryRecord_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ProposalHistoryRecord_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ProposalHistoryRecord_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ProposalHistoryRecord at list field Agreed as it is not of Message kind"))
}

func (x *_ProposalHistoryRecord_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ProposalHistoryRecord_3_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_ProposalHistoryRecord_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_ProposalHistoryRecord_4_list)(nil)

type _ProposalHistoryRecord_4_list struct {
	list *[]string
}

func (x *_ProposalHistoryRecord_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ProposalHistoryRecord_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_ProposalHistoryRecord_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ProposalHistoryRecord_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ProposalHistoryRecord_4_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ProposalHistoryRecord at list field Disagreed as it is not of Message kind"))
}

func (x *_ProposalHistoryRecord_4_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ProposalHistoryRecord_4_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_ProposalHistoryRecord_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ProposalHistoryRecord            protoreflect.MessageDescriptor
	fd_ProposalHistoryRecord_proposal   protoreflect.FieldDescriptor
	fd_ProposalHistoryRecord_government protoreflect.FieldDescriptor
	fd_ProposalHistoryRecord_agreed     protoreflect.FieldDescriptor
	fd_ProposalHistoryRecord_disagreed  protoreflect.FieldDescriptor
	fd_ProposalHistoryRecord_started    protoreflect.FieldDescriptor
	fd_ProposalHistoryRecord_finished   protoreflect.FieldDescriptor
)

func init() {
	file_axiome_vote_v1beta1_types_proto_init()
	md_ProposalHistoryRecord = File_axiome_vote_v1beta1_types_proto.Messages().ByName("ProposalHistoryRecord")
	fd_ProposalHistoryRecord_proposal = md_ProposalHistoryRecord.Fields().ByName("proposal")
	fd_ProposalHistoryRecord_government = md_ProposalHistoryRecord.Fields().ByName("government")
	fd_ProposalHistoryRecord_agreed = md_ProposalHistoryRecord.Fields().ByName("agreed")
	fd_ProposalHistoryRecord_disagreed = md_ProposalHistoryRecord.Fields().ByName("disagreed")
	fd_ProposalHistoryRecord_started = md_ProposalHistoryRecord.Fields().ByName("started")
	fd_ProposalHistoryRecord_finished = md_ProposalHistoryRecord.Fields().ByName("finished")
}

var _ protoreflect.Message = (*fastReflection_ProposalHistoryRecord)(nil)

type fastReflection_ProposalHistoryRecord ProposalHistoryRecord

func (x *ProposalHistoryRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ProposalHistoryRecord)(x)
}

func (x *ProposalHistoryRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_axiome_vote_v1beta1_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ProposalHistoryRecord_messageType fastReflection_ProposalHistoryRecord_messageType
var _ protoreflect.MessageType = fastReflection_ProposalHistoryRecord_messageType{}

type fastReflection_ProposalHistoryRecord_messageType struct{}

func (x fastReflection_ProposalHistoryRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ProposalHistoryRecord)(nil)
}
func (x fastReflection_ProposalHistoryRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_ProposalHistoryRecord)
}
func (x fastReflection_ProposalHistoryRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ProposalHistoryRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ProposalHistoryRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_ProposalHistoryRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ProposalHistoryRecord) Type() protoreflect.MessageType {
	return _fastReflection_ProposalHistoryRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ProposalHistoryRecord) New() protoreflect.Message {
	return new(fastReflection_ProposalHistoryRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ProposalHistoryRecord) Interface() protoreflect.ProtoMessage {
	return (*ProposalHistoryRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ProposalHistoryRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Proposal != nil {
		value := protoreflect.ValueOfMessage(x.Proposal.ProtoReflect())
		if !f(fd_ProposalHistoryRecord_proposal, value) {
			return
		}
	}
	if len(x.Government) != 0 {
		value := protoreflect.ValueOfList(&_ProposalHistoryRecord_2_list{list: &x.Government})
		if !f(fd_ProposalHistoryRecord_government, value) {
			return
		}
	}
	if len(x.Agreed) != 0 {
		value := protoreflect.ValueOfList(&_ProposalHistoryRecord_3_list{list: &x.Agreed})
		if !f(fd_ProposalHistoryRecord_agreed, value) {
			return
		}
	}
	if len(x.Disagreed) != 0 {
		value := protoreflect.ValueOfList(&_ProposalHistoryRecord_4_list{list: &x.Disagreed})
		if !f(fd_ProposalHistoryRecord_disagreed, value) {
			return
		}
	}
	if x.Started != int64(0) {
		value := protoreflect.ValueOfInt64(x.Started)
		if !f(fd_ProposalHistoryRecord_started, value) {
			return
		}
	}
	if x.Finished != int64(0) {
		value := protoreflect.ValueOfInt64(x.Finished)
		if !f(fd_ProposalHistoryRecord_finished, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ProposalHistoryRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.ProposalHistoryRecord.proposal":
		return x.Proposal != nil
	case "axiome.vote.v1beta1.ProposalHistoryRecord.government":
		return len(x.Government) != 0
	case "axiome.vote.v1beta1.ProposalHistoryRecord.agreed":
		return len(x.Agreed) != 0
	case "axiome.vote.v1beta1.ProposalHistoryRecord.disagreed":
		return len(x.Disagreed) != 0
	case "axiome.vote.v1beta1.ProposalHistoryRecord.started":
		return x.Started != int64(0)
	case "axiome.vote.v1beta1.ProposalHistoryRecord.finished":
		return x.Finished != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.ProposalHistoryRecord"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.ProposalHistoryRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProposalHistoryRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.ProposalHistoryRecord.proposal":
		x.Proposal = nil
	case "axiome.vote.v1beta1.ProposalHistoryRecord.government":
		x.Government = nil
	case "axiome.vote.v1beta1.ProposalHistoryRecord.agreed":
		x.Agreed = nil
	case "axiome.vote.v1beta1.ProposalHistoryRecord.disagreed":
		x.Disagreed = nil
	case "axiome.vote.v1beta1.ProposalHistoryRecord.started":
		x.Started = int64(0)
	case "axiome.vote.v1beta1.ProposalHistoryRecord.finished":
		x.Finished = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.ProposalHistoryRecord"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.ProposalHistoryRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ProposalHistoryRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "axiome.vote.v1beta1.ProposalHistoryRecord.proposal":
		value := x.Proposal
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "axiome.vote.v1beta1.ProposalHistoryRecord.government":
		if len(x.Government) == 0 {
			return protoreflect.ValueOfList(&_ProposalHistoryRecord_2_list{})
		}
		listValue := &_ProposalHistoryRecord_2_list{list: &x.Government}
		return protoreflect.ValueOfList(listValue)
	case "axiome.vote.v1beta1.ProposalHistoryRecord.agreed":
		if len(x.Agreed) == 0 {
			return protoreflect.ValueOfList(&_ProposalHistoryRecord_3_list{})
		}
		listValue := &_ProposalHistoryRecord_3_list{list: &x.Agreed}
		return protoreflect.ValueOfList(listValue)
	case "axiome.vote.v1beta1.ProposalHistoryRecord.disagreed":
		if len(x.Disagreed) == 0 {
			return protoreflect.ValueOfList(&_ProposalHistoryRecord_4_list{})
		}
		listValue := &_ProposalHistoryRecord_4_list{list: &x.Disagreed}
		return protoreflect.ValueOfList(listValue)
	case "axiome.vote.v1beta1.ProposalHistoryRecord.started":
		value := x.Started
		return protoreflect.ValueOfInt64(value)
	case "axiome.vote.v1beta1.ProposalHistoryRecord.finished":
		value := x.Finished
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.ProposalHistoryRecord"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.ProposalHistoryRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProposalHistoryRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.ProposalHistoryRecord.proposal":
		x.Proposal = value.Message().Interface().(*Proposal)
	case "axiome.vote.v1beta1.ProposalHistoryRecord.government":
		lv := value.List()
		clv := lv.(*_ProposalHistoryRecord_2_list)
		x.Government = *clv.list
	case "axiome.vote.v1beta1.ProposalHistoryRecord.agreed":
		lv := value.List()
		clv := lv.(*_ProposalHistoryRecord_3_list)
		x.Agreed = *clv.list
	case "axiome.vote.v1beta1.ProposalHistoryRecord.disagreed":
		lv := value.List()
		clv := lv.(*_ProposalHistoryRecord_4_list)
		x.Disagreed = *clv.list
	case "axiome.vote.v1beta1.ProposalHistoryRecord.started":
		x.Started = value.Int()
	case "axiome.vote.v1beta1.ProposalHistoryRecord.finished":
		x.Finished = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.ProposalHistoryRecord"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.ProposalHistoryRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProposalHistoryRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.ProposalHistoryRecord.proposal":
		if x.Proposal == nil {
			x.Proposal = new(Proposal)
		}
		return protoreflect.ValueOfMessage(x.Proposal.ProtoReflect())
	case "axiome.vote.v1beta1.ProposalHistoryRecord.government":
		if x.Government == nil {
			x.Government = []string{}
		}
		value := &_ProposalHistoryRecord_2_list{list: &x.Government}
		return protoreflect.ValueOfList(value)
	case "axiome.vote.v1beta1.ProposalHistoryRecord.agreed":
		if x.Agreed == nil {
			x.Agreed = []string{}
		}
		value := &_ProposalHistoryRecord_3_list{list: &x.Agreed}
		return protoreflect.ValueOfList(value)
	case "axiome.vote.v1beta1.ProposalHistoryRecord.disagreed":
		if x.Disagreed == nil {
			x.Disagreed = []string{}
		}
		value := &_ProposalHistoryRecord_4_list{list: &x.Disagreed}
		return protoreflect.ValueOfList(value)
	case "axiome.vote.v1beta1.ProposalHistoryRecord.started":
		panic(fmt.Errorf("field started of message axiome.vote.v1beta1.ProposalHistoryRecord is not mutable"))
	case "axiome.vote.v1beta1.ProposalHistoryRecord.finished":
		panic(fmt.Errorf("field finished of message axiome.vote.v1beta1.ProposalHistoryRecord is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.ProposalHistoryRecord"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.ProposalHistoryRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ProposalHistoryRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.ProposalHistoryRecord.proposal":
		m := new(Proposal)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "axiome.vote.v1beta1.ProposalHistoryRecord.government":
		list := []string{}
		return protoreflect.ValueOfList(&_ProposalHistoryRecord_2_list{list: &list})
	case "axiome.vote.v1beta1.ProposalHistoryRecord.agreed":
		list := []string{}
		return protoreflect.ValueOfList(&_ProposalHistoryRecord_3_list{list: &list})
	case "axiome.vote.v1beta1.ProposalHistoryRecord.disagreed":
		list := []string{}
		return protoreflect.ValueOfList(&_ProposalHistoryRecord_4_list{list: &list})
	case "axiome.vote.v1beta1.ProposalHistoryRecord.started":
		return protoreflect.ValueOfInt64(int64(0))
	case "axiome.vote.v1beta1.ProposalHistoryRecord.finished":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.ProposalHistoryRecord"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.ProposalHistoryRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ProposalHistoryRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in axiome.vote.v1beta1.ProposalHistoryRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ProposalHistoryRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProposalHistoryRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ProposalHistoryRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ProposalHistoryRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ProposalHistoryRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Proposal != nil {
			l = options.Size(x.Proposal)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Government) > 0 {
			for _, s := range x.Government {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Agreed) > 0 {
			for _, s := range x.Agreed {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Disagreed) > 0 {
			for _, s := range x.Disagreed {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Started != 0 {
			n += 1 + runtime.Sov(uint64(x.Started))
		}
		if x.Finished != 0 {
			n += 1 + runtime.Sov(uint64(x.Finished))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ProposalHistoryRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Finished != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Finished))
			i--
			dAtA[i] = 0x30
		}
		if x.Started != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Started))
			i--
			dAtA[i] = 0x28
		}
		if len(x.Disagreed) > 0 {
			for iNdEx := len(x.Disagreed) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Disagreed[iNdEx])
				copy(dAtA[i:], x.Disagreed[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Disagreed[iNdEx])))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.Agreed) > 0 {
			for iNdEx := len(x.Agreed) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Agreed[iNdEx])
				copy(dAtA[i:], x.Agreed[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Agreed[iNdEx])))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.Government) > 0 {
			for iNdEx := len(x.Government) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Government[iNdEx])
				copy(dAtA[i:], x.Government[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Government[iNdEx])))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.Proposal != nil {
			encoded, err := options.Marshal(x.Proposal)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ProposalHistoryRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ProposalHistoryRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ProposalHistoryRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Proposal == nil {
					x.Proposal = &Proposal{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Proposal); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Government", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Government = append(x.Government, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Agreed", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Agreed = append(x.Agreed, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Disagreed", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Disagreed = append(x.Disagreed, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Started", wireType)
				}
				x.Started = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Started |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Finished", wireType)
				}
				x.Finished = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Finished |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_Government_1_list)(nil)

type _Government_1_list struct {
	list *[]string
}

func (x *_Government_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Government_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Government_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Government_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Government_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Government at list field Members as it is not of Message kind"))
}

func (x *_Government_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Government_1_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Government_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Government         protoreflect.MessageDescriptor
	fd_Government_members protoreflect.FieldDescriptor
)

func init() {
	file_axiome_vote_v1beta1_types_proto_init()
	md_Government = File_axiome_vote_v1beta1_types_proto.Messages().ByName("Government")
	fd_Government_members = md_Government.Fields().ByName("members")
}

var _ protoreflect.Message = (*fastReflection_Government)(nil)

type fastReflection_Government Government

func (x *Government) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Government)(x)
}

func (x *Government) slowProtoReflect() protoreflect.Message {
	mi := &file_axiome_vote_v1beta1_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Government_messageType fastReflection_Government_messageType
var _ protoreflect.MessageType = fastReflection_Government_messageType{}

type fastReflection_Government_messageType struct{}

func (x fastReflection_Government_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Government)(nil)
}
func (x fastReflection_Government_messageType) New() protoreflect.Message {
	return new(fastReflection_Government)
}
func (x fastReflection_Government_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Government
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Government) Descriptor() protoreflect.MessageDescriptor {
	return md_Government
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Government) Type() protoreflect.MessageType {
	return _fastReflection_Government_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Government) New() protoreflect.Message {
	return new(fastReflection_Government)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Government) Interface() protoreflect.ProtoMessage {
	return (*Government)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Government) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Members) != 0 {
		value := protoreflect.ValueOfList(&_Government_1_list{list: &x.Members})
		if !f(fd_Government_members, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Government) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.Government.members":
		return len(x.Members) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Government"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Government does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Government) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.Government.members":
		x.Members = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Government"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Government does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Government) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "axiome.vote.v1beta1.Government.members":
		if len(x.Members) == 0 {
			return protoreflect.ValueOfList(&_Government_1_list{})
		}
		listValue := &_Government_1_list{list: &x.Members}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Government"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Government does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Government) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.Government.members":
		lv := value.List()
		clv := lv.(*_Government_1_list)
		x.Members = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Government"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Government does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Government) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.Government.members":
		if x.Members == nil {
			x.Members = []string{}
		}
		value := &_Government_1_list{list: &x.Members}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Government"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Government does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Government) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.Government.members":
		list := []string{}
		return protoreflect.ValueOfList(&_Government_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Government"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Government does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Government) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in axiome.vote.v1beta1.Government", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Government) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Government) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Government) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Government) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Government)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Members) > 0 {
			for _, s := range x.Members {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Government)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Members) > 0 {
			for iNdEx := len(x.Members) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Members[iNdEx])
				copy(dAtA[i:], x.Members[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Members[iNdEx])))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Government)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Government: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Government: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Members = append(x.Members, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Poll              protoreflect.MessageDescriptor
	fd_Poll_name         protoreflect.FieldDescriptor
	fd_Poll_author       protoreflect.FieldDescriptor
	fd_Poll_question     protoreflect.FieldDescriptor
	fd_Poll_start_time   protoreflect.FieldDescriptor
	fd_Poll_end_time     protoreflect.FieldDescriptor
	fd_Poll_quorum       protoreflect.FieldDescriptor
	fd_Poll_can_validate protoreflect.FieldDescriptor
	fd_Poll_min_status   protoreflect.FieldDescriptor
)

func init() {
	file_axiome_vote_v1beta1_types_proto_init()
	md_Poll = File_axiome_vote_v1beta1_types_proto.Messages().ByName("Poll")
	fd_Poll_name = md_Poll.Fields().ByName("name")
	fd_Poll_author = md_Poll.Fields().ByName("author")
	fd_Poll_question = md_Poll.Fields().ByName("question")
	fd_Poll_start_time = md_Poll.Fields().ByName("start_time")
	fd_Poll_end_time = md_Poll.Fields().ByName("end_time")
	fd_Poll_quorum = md_Poll.Fields().ByName("quorum")
	fd_Poll_can_validate = md_Poll.Fields().ByName("can_validate")
	fd_Poll_min_status = md_Poll.Fields().ByName("min_status")
}

var _ protoreflect.Message = (*fastReflection_Poll)(nil)

type fastReflection_Poll Poll

func (x *Poll) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Poll)(x)
}

func (x *Poll) slowProtoReflect() protoreflect.Message {
	mi := &file_axiome_vote_v1beta1_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Poll_messageType fastReflection_Poll_messageType
var _ protoreflect.MessageType = fastReflection_Poll_messageType{}

type fastReflection_Poll_messageType struct{}

func (x fastReflection_Poll_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Poll)(nil)
}
func (x fastReflection_Poll_messageType) New() protoreflect.Message {
	return new(fastReflection_Poll)
}
func (x fastReflection_Poll_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Poll
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Poll) Descriptor() protoreflect.MessageDescriptor {
	return md_Poll
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Poll) Type() protoreflect.MessageType {
	return _fastReflection_Poll_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Poll) New() protoreflect.Message {
	return new(fastReflection_Poll)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Poll) Interface() protoreflect.ProtoMessage {
	return (*Poll)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Poll) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_Poll_name, value) {
			return
		}
	}
	if x.Author != "" {
		value := protoreflect.ValueOfString(x.Author)
		if !f(fd_Poll_author, value) {
			return
		}
	}
	if x.Question != "" {
		value := protoreflect.ValueOfString(x.Question)
		if !f(fd_Poll_question, value) {
			return
		}
	}
	if x.StartTime != nil {
		value := protoreflect.ValueOfMessage(x.StartTime.ProtoReflect())
		if !f(fd_Poll_start_time, value) {
			return
		}
	}
	if x.EndTime != nil {
		value := protoreflect.ValueOfMessage(x.EndTime.ProtoReflect())
		if !f(fd_Poll_end_time, value) {
			return
		}
	}
	if x.Quorum != "" {
		value := protoreflect.ValueOfString(x.Quorum)
		if !f(fd_Poll_quorum, value) {
			return
		}
	}
	if x.Requirements != nil {
		switch o := x.Requirements.(type) {
		case *Poll_CanValidate:
			v := o.CanValidate
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Poll_can_validate, value) {
				return
			}
		case *Poll_MinStatus:
			v := o.MinStatus
			value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(v))
			if !f(fd_Poll_min_status, value) {
				return
			}
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Poll) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.Poll.name":
		return x.Name != ""
	case "axiome.vote.v1beta1.Poll.author":
		return x.Author != ""
	case "axiome.vote.v1beta1.Poll.question":
		return x.Question != ""
	case "axiome.vote.v1beta1.Poll.start_time":
		return x.StartTime != nil
	case "axiome.vote.v1beta1.Poll.end_time":
		return x.EndTime != nil
	case "axiome.vote.v1beta1.Poll.quorum":
		return x.Quorum != ""
	case "axiome.vote.v1beta1.Poll.can_validate":
		if x.Requirements == nil {
			return false
		} else if _, ok := x.Requirements.(*Poll_CanValidate); ok {
			return true
		} else {
			return false
		}
	case "axiome.vote.v1beta1.Poll.min_status":
		if x.Requirements == nil {
			return false
		} else if _, ok := x.Requirements.(*Poll_MinStatus); ok {
			return true
		} else {
			return false
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Poll"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Poll does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Poll) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.Poll.name":
		x.Name = ""
	case "axiome.vote.v1beta1.Poll.author":
		x.Author = ""
	case "axiome.vote.v1beta1.Poll.question":
		x.Question = ""
	case "axiome.vote.v1beta1.Poll.start_time":
		x.StartTime = nil
	case "axiome.vote.v1beta1.Poll.end_time":
		x.EndTime = nil
	case "axiome.vote.v1beta1.Poll.quorum":
		x.Quorum = ""
	case "axiome.vote.v1beta1.Poll.can_validate":
		x.Requirements = nil
	case "axiome.vote.v1beta1.Poll.min_status":
		x.Requirements = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Poll"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Poll does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Poll) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "axiome.vote.v1beta1.Poll.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "axiome.vote.v1beta1.Poll.author":
		value := x.Author
		return protoreflect.ValueOfString(value)
	case "axiome.vote.v1beta1.Poll.question":
		value := x.Question
		return protoreflect.ValueOfString(value)
	case "axiome.vote.v1beta1.Poll.start_time":
		value := x.StartTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "axiome.vote.v1beta1.Poll.end_time":
		value := x.EndTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "axiome.vote.v1beta1.Poll.quorum":
		value := x.Quorum
		return protoreflect.ValueOfString(value)
	case "axiome.vote.v1beta1.Poll.can_validate":
		if x.Requirements == nil {
			return protoreflect.ValueOfMessage((*Poll_Unit)(nil).ProtoReflect())
		} else if v, ok := x.Requirements.(*Poll_CanValidate); ok {
			return protoreflect.ValueOfMessage(v.CanValidate.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*Poll_Unit)(nil).ProtoReflect())
		}
	case "axiome.vote.v1beta1.Poll.min_status":
		if x.Requirements == nil {
			return protoreflect.ValueOfEnum(0)
		} else if v, ok := x.Requirements.(*Poll_MinStatus); ok {
			return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(v.MinStatus))
		} else {
			return protoreflect.ValueOfEnum(0)
		}
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Poll"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Poll does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Poll) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.Poll.name":
		x.Name = value.Interface().(string)
	case "axiome.vote.v1beta1.Poll.author":
		x.Author = value.Interface().(string)
	case "axiome.vote.v1beta1.Poll.question":
		x.Question = value.Interface().(string)
	case "axiome.vote.v1beta1.Poll.start_time":
		x.StartTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "axiome.vote.v1beta1.Poll.end_time":
		x.EndTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "axiome.vote.v1beta1.Poll.quorum":
		x.Quorum = value.Interface().(string)
	case "axiome.vote.v1beta1.Poll.can_validate":
		cv := value.Message().Interface().(*Poll_Unit)
		x.Requirements = &Poll_CanValidate{CanValidate: cv}
	case "axiome.vote.v1beta1.Poll.min_status":
		cv := (v1beta1.Status)(value.Enum())
		x.Requirements = &Poll_MinStatus{MinStatus: cv}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Poll"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Poll does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Poll) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.Poll.start_time":
		if x.StartTime == nil {
			x.StartTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.StartTime.ProtoReflect())
	case "axiome.vote.v1beta1.Poll.end_time":
		if x.EndTime == nil {
			x.EndTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.EndTime.ProtoReflect())
	case "axiome.vote.v1beta1.Poll.can_validate":
		if x.Requirements == nil {
			value := &Poll_Unit{}
			oneofValue := &Poll_CanValidate{CanValidate: value}
			x.Requirements = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Requirements.(type) {
		case *Poll_CanValidate:
			return protoreflect.ValueOfMessage(m.CanValidate.ProtoReflect())
		default:
			value := &Poll_Unit{}
			oneofValue := &Poll_CanValidate{CanValidate: value}
			x.Requirements = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "axiome.vote.v1beta1.Poll.name":
		panic(fmt.Errorf("field name of message axiome.vote.v1beta1.Poll is not mutable"))
	case "axiome.vote.v1beta1.Poll.author":
		panic(fmt.Errorf("field author of message axiome.vote.v1beta1.Poll is not mutable"))
	case "axiome.vote.v1beta1.Poll.question":
		panic(fmt.Errorf("field question of message axiome.vote.v1beta1.Poll is not mutable"))
	case "axiome.vote.v1beta1.Poll.quorum":
		panic(fmt.Errorf("field quorum of message axiome.vote.v1beta1.Poll is not mutable"))
	case "axiome.vote.v1beta1.Poll.min_status":
		panic(fmt.Errorf("field min_status of message axiome.vote.v1beta1.Poll is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Poll"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Poll does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Poll) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.Poll.name":
		return protoreflect.ValueOfString("")
	case "axiome.vote.v1beta1.Poll.author":
		return protoreflect.ValueOfString("")
	case "axiome.vote.v1beta1.Poll.question":
		return protoreflect.ValueOfString("")
	case "axiome.vote.v1beta1.Poll.start_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "axiome.vote.v1beta1.Poll.end_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "axiome.vote.v1beta1.Poll.quorum":
		return protoreflect.ValueOfString("")
	case "axiome.vote.v1beta1.Poll.can_validate":
		value := &Poll_Unit{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "axiome.vote.v1beta1.Poll.min_status":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Poll"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Poll does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Poll) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	case "axiome.vote.v1beta1.Poll.requirements":
		if x.Requirements == nil {
			return nil
		}
		switch x.Requirements.(type) {
		case *Poll_CanValidate:
			return x.Descriptor().Fields().ByName("can_validate")
		case *Poll_MinStatus:
			return x.Descriptor().Fields().ByName("min_status")
		}
	default:
		panic(fmt.Errorf("%s is not a oneof field in axiome.vote.v1beta1.Poll", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Poll) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Poll) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Poll) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Poll) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Poll)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Author)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Question)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.StartTime != nil {
			l = options.Size(x.StartTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EndTime != nil {
			l = options.Size(x.EndTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Quorum)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		switch x := x.Requirements.(type) {
		case *Poll_CanValidate:
			if x == nil {
				break
			}
			l = options.Size(x.CanValidate)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Poll_MinStatus:
			if x == nil {
				break
			}
			n += 1 + runtime.Sov(uint64(x.MinStatus))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Poll)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		switch x := x.Requirements.(type) {
		case *Poll_CanValidate:
			encoded, err := options.Marshal(x.CanValidate)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		case *Poll_MinStatus:
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MinStatus))
			i--
			dAtA[i] = 0x40
		}
		if len(x.Quorum) > 0 {
			i -= len(x.Quorum)
			copy(dAtA[i:], x.Quorum)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Quorum)))
			i--
			dAtA[i] = 0x32
		}
		if x.EndTime != nil {
			encoded, err := options.Marshal(x.EndTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if x.StartTime != nil {
			encoded, err := options.Marshal(x.StartTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Question) > 0 {
			i -= len(x.Question)
			copy(dAtA[i:], x.Question)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Question)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Author) > 0 {
			i -= len(x.Author)
			copy(dAtA[i:], x.Author)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Author)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Poll)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Poll: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Poll: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Author = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Question", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Question = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.StartTime == nil {
					x.StartTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.StartTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EndTime == nil {
					x.EndTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EndTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Quorum", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Quorum = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CanValidate", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &Poll_Unit{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Requirements = &Poll_CanValidate{v}
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinStatus", wireType)
				}
				var v v1beta1.Status
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= v1beta1.Status(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Requirements = &Poll_MinStatus{v}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Poll_Unit protoreflect.MessageDescriptor
)

func init() {
	file_axiome_vote_v1beta1_types_proto_init()
	md_Poll_Unit = File_axiome_vote_v1beta1_types_proto.Messages().ByName("Poll").Messages().ByName("Unit")
}

var _ protoreflect.Message = (*fastReflection_Poll_Unit)(nil)

type fastReflection_Poll_Unit Poll_Unit

func (x *Poll_Unit) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Poll_Unit)(x)
}

func (x *Poll_Unit) slowProtoReflect() protoreflect.Message {
	mi := &file_axiome_vote_v1beta1_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Poll_Unit_messageType fastReflection_Poll_Unit_messageType
var _ protoreflect.MessageType = fastReflection_Poll_Unit_messageType{}

type fastReflection_Poll_Unit_messageType struct{}

func (x fastReflection_Poll_Unit_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Poll_Unit)(nil)
}
func (x fastReflection_Poll_Unit_messageType) New() protoreflect.Message {
	return new(fastReflection_Poll_Unit)
}
func (x fastReflection_Poll_Unit_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Poll_Unit
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Poll_Unit) Descriptor() protoreflect.MessageDescriptor {
	return md_Poll_Unit
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Poll_Unit) Type() protoreflect.MessageType {
	return _fastReflection_Poll_Unit_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Poll_Unit) New() protoreflect.Message {
	return new(fastReflection_Poll_Unit)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Poll_Unit) Interface() protoreflect.ProtoMessage {
	return (*Poll_Unit)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Poll_Unit) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Poll_Unit) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Poll.Unit"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Poll.Unit does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Poll_Unit) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Poll.Unit"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Poll.Unit does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Poll_Unit) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Poll.Unit"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Poll.Unit does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Poll_Unit) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Poll.Unit"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Poll.Unit does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Poll_Unit) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Poll.Unit"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Poll.Unit does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Poll_Unit) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.Poll.Unit"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.Poll.Unit does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Poll_Unit) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in axiome.vote.v1beta1.Poll.Unit", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Poll_Unit) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Poll_Unit) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Poll_Unit) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Poll_Unit) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Poll_Unit)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Poll_Unit)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Poll_Unit)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Poll_Unit: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Poll_Unit: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_PollHistoryItem          protoreflect.MessageDescriptor
	fd_PollHistoryItem_poll     protoreflect.FieldDescriptor
	fd_PollHistoryItem_yes      protoreflect.FieldDescriptor
	fd_PollHistoryItem_no       protoreflect.FieldDescriptor
	fd_PollHistoryItem_decision protoreflect.FieldDescriptor
)

func init() {
	file_axiome_vote_v1beta1_types_proto_init()
	md_PollHistoryItem = File_axiome_vote_v1beta1_types_proto.Messages().ByName("PollHistoryItem")
	fd_PollHistoryItem_poll = md_PollHistoryItem.Fields().ByName("poll")
	fd_PollHistoryItem_yes = md_PollHistoryItem.Fields().ByName("yes")
	fd_PollHistoryItem_no = md_PollHistoryItem.Fields().ByName("no")
	fd_PollHistoryItem_decision = md_PollHistoryItem.Fields().ByName("decision")
}

var _ protoreflect.Message = (*fastReflection_PollHistoryItem)(nil)

type fastReflection_PollHistoryItem PollHistoryItem

func (x *PollHistoryItem) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PollHistoryItem)(x)
}

func (x *PollHistoryItem) slowProtoReflect() protoreflect.Message {
	mi := &file_axiome_vote_v1beta1_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PollHistoryItem_messageType fastReflection_PollHistoryItem_messageType
var _ protoreflect.MessageType = fastReflection_PollHistoryItem_messageType{}

type fastReflection_PollHistoryItem_messageType struct{}

func (x fastReflection_PollHistoryItem_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PollHistoryItem)(nil)
}
func (x fastReflection_PollHistoryItem_messageType) New() protoreflect.Message {
	return new(fastReflection_PollHistoryItem)
}
func (x fastReflection_PollHistoryItem_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PollHistoryItem
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PollHistoryItem) Descriptor() protoreflect.MessageDescriptor {
	return md_PollHistoryItem
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PollHistoryItem) Type() protoreflect.MessageType {
	return _fastReflection_PollHistoryItem_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PollHistoryItem) New() protoreflect.Message {
	return new(fastReflection_PollHistoryItem)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PollHistoryItem) Interface() protoreflect.ProtoMessage {
	return (*PollHistoryItem)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PollHistoryItem) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Poll != nil {
		value := protoreflect.ValueOfMessage(x.Poll.ProtoReflect())
		if !f(fd_PollHistoryItem_poll, value) {
			return
		}
	}
	if x.Yes != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Yes)
		if !f(fd_PollHistoryItem_yes, value) {
			return
		}
	}
	if x.No != uint64(0) {
		value := protoreflect.ValueOfUint64(x.No)
		if !f(fd_PollHistoryItem_no, value) {
			return
		}
	}
	if x.Decision != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Decision))
		if !f(fd_PollHistoryItem_decision, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PollHistoryItem) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.PollHistoryItem.poll":
		return x.Poll != nil
	case "axiome.vote.v1beta1.PollHistoryItem.yes":
		return x.Yes != uint64(0)
	case "axiome.vote.v1beta1.PollHistoryItem.no":
		return x.No != uint64(0)
	case "axiome.vote.v1beta1.PollHistoryItem.decision":
		return x.Decision != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.PollHistoryItem"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.PollHistoryItem does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PollHistoryItem) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.PollHistoryItem.poll":
		x.Poll = nil
	case "axiome.vote.v1beta1.PollHistoryItem.yes":
		x.Yes = uint64(0)
	case "axiome.vote.v1beta1.PollHistoryItem.no":
		x.No = uint64(0)
	case "axiome.vote.v1beta1.PollHistoryItem.decision":
		x.Decision = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.PollHistoryItem"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.PollHistoryItem does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PollHistoryItem) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "axiome.vote.v1beta1.PollHistoryItem.poll":
		value := x.Poll
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "axiome.vote.v1beta1.PollHistoryItem.yes":
		value := x.Yes
		return protoreflect.ValueOfUint64(value)
	case "axiome.vote.v1beta1.PollHistoryItem.no":
		value := x.No
		return protoreflect.ValueOfUint64(value)
	case "axiome.vote.v1beta1.PollHistoryItem.decision":
		value := x.Decision
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.PollHistoryItem"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.PollHistoryItem does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PollHistoryItem) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.PollHistoryItem.poll":
		x.Poll = value.Message().Interface().(*Poll)
	case "axiome.vote.v1beta1.PollHistoryItem.yes":
		x.Yes = value.Uint()
	case "axiome.vote.v1beta1.PollHistoryItem.no":
		x.No = value.Uint()
	case "axiome.vote.v1beta1.PollHistoryItem.decision":
		x.Decision = (Decision)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.PollHistoryItem"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.PollHistoryItem does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PollHistoryItem) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.PollHistoryItem.poll":
		if x.Poll == nil {
			x.Poll = new(Poll)
		}
		return protoreflect.ValueOfMessage(x.Poll.ProtoReflect())
	case "axiome.vote.v1beta1.PollHistoryItem.yes":
		panic(fmt.Errorf("field yes of message axiome.vote.v1beta1.PollHistoryItem is not mutable"))
	case "axiome.vote.v1beta1.PollHistoryItem.no":
		panic(fmt.Errorf("field no of message axiome.vote.v1beta1.PollHistoryItem is not mutable"))
	case "axiome.vote.v1beta1.PollHistoryItem.decision":
		panic(fmt.Errorf("field decision of message axiome.vote.v1beta1.PollHistoryItem is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.PollHistoryItem"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.PollHistoryItem does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PollHistoryItem) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "axiome.vote.v1beta1.PollHistoryItem.poll":
		m := new(Poll)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "axiome.vote.v1beta1.PollHistoryItem.yes":
		return protoreflect.ValueOfUint64(uint64(0))
	case "axiome.vote.v1beta1.PollHistoryItem.no":
		return protoreflect.ValueOfUint64(uint64(0))
	case "axiome.vote.v1beta1.PollHistoryItem.decision":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: axiome.vote.v1beta1.PollHistoryItem"))
		}
		panic(fmt.Errorf("message axiome.vote.v1beta1.PollHistoryItem does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PollHistoryItem) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in axiome.vote.v1beta1.PollHistoryItem", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PollHistoryItem) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PollHistoryItem) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PollHistoryItem) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PollHistoryItem) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PollHistoryItem)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Poll != nil {
			l = options.Size(x.Poll)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Yes != 0 {
			n += 1 + runtime.Sov(uint64(x.Yes))
		}
		if x.No != 0 {
			n += 1 + runtime.Sov(uint64(x.No))
		}
		if x.Decision != 0 {
			n += 1 + runtime.Sov(uint64(x.Decision))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PollHistoryItem)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Decision != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Decision))
			i--
			dAtA[i] = 0x20
		}
		if x.No != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.No))
			i--
			dAtA[i] = 0x18
		}
		if x.Yes != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Yes))
			i--
			dAtA[i] = 0x10
		}
		if x.Poll != nil {
			encoded, err := options.Marshal(x.Poll)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PollHistoryItem)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PollHistoryItem: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PollHistoryItem: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Poll", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Poll == nil {
					x.Poll = &Poll{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Poll); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Yes", wireType)
				}
				x.Yes = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Yes |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field No", wireType)
				}
				x.No = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.No |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Decision", wireType)
				}
				x.Decision = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Decision |= Decision(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: axiome/vote/v1beta1/types.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Decision int32

const (
	Decision_DECISION_UNSPECIFIED Decision = 0
	Decision_DECISION_POSITIVE    Decision = 1
	Decision_DECISION_NEGATIVE    Decision = 2
)

// Enum value maps for Decision.
var (
	Decision_name = map[int32]string{
		0: "DECISION_UNSPECIFIED",
		1: "DECISION_POSITIVE",
		2: "DECISION_NEGATIVE",
	}
	Decision_value = map[string]int32{
		"DECISION_UNSPECIFIED": 0,
		"DECISION_POSITIVE":    1,
		"DECISION_NEGATIVE":    2,
	}
)

func (x Decision) Enum() *Decision {
	p := new(Decision)
	*p = x
	return p
}

func (x Decision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Decision) Descriptor() protoreflect.EnumDescriptor {
	return file_axiome_vote_v1beta1_types_proto_enumTypes[0].Descriptor()
}

func (Decision) Type() protoreflect.EnumType {
	return &file_axiome_vote_v1beta1_types_proto_enumTypes[0]
}

func (x Decision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Decision.Descriptor instead.
func (Decision) EnumDescriptor() ([]byte, []int) {
	return file_axiome_vote_v1beta1_types_proto_rawDescGZIP(), []int{0}
}

type Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Author   string                 `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Messages []*anypb.Any           `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
	EndTime  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *Proposal) Reset() {
	*x = Proposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_axiome_vote_v1beta1_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal) ProtoMessage() {}

// Deprecated: Use Proposal.ProtoReflect.Descriptor instead.
func (*Proposal) Descriptor() ([]byte, []int) {
	return file_axiome_vote_v1beta1_types_proto_rawDescGZIP(), []int{0}
}

func (x *Proposal) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Proposal) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Proposal) GetMessages() []*anypb.Any {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *Proposal) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type ProposalHistoryRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposal   *Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	Government []string  `protobuf:"bytes,2,rep,name=government,proto3" json:"government,omitempty"`
	Agreed     []string  `protobuf:"bytes,3,rep,name=agreed,proto3" json:"agreed,omitempty"`
	Disagreed  []string  `protobuf:"bytes,4,rep,name=disagreed,proto3" json:"disagreed,omitempty"`
	Started    int64     `protobuf:"varint,5,opt,name=started,proto3" json:"started,omitempty"`
	Finished   int64     `protobuf:"varint,6,opt,name=finished,proto3" json:"finished,omitempty"`
}

func (x *ProposalHistoryRecord) Reset() {
	*x = ProposalHistoryRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_axiome_vote_v1beta1_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalHistoryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalHistoryRecord) ProtoMessage() {}

// Deprecated: Use ProposalHistoryRecord.ProtoReflect.Descriptor instead.
func (*ProposalHistoryRecord) Descriptor() ([]byte, []int) {
	return file_axiome_vote_v1beta1_types_proto_rawDescGZIP(), []int{1}
}

func (x *ProposalHistoryRecord) GetProposal() *Proposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *ProposalHistoryRecord) GetGovernment() []string {
	if x != nil {
		return x.Government
	}
	return nil
}

func (x *ProposalHistoryRecord) GetAgreed() []string {
	if x != nil {
		return x.Agreed
	}
	return nil
}

func (x *ProposalHistoryRecord) GetDisagreed() []string {
	if x != nil {
		return x.Disagreed
	}
	return nil
}

func (x *ProposalHistoryRecord) GetStarted() int64 {
	if x != nil {
		return x.Started
	}
	return 0
}

func (x *ProposalHistoryRecord) GetFinished() int64 {
	if x != nil {
		return x.Finished
	}
	return 0
}

// Government is a list of accounts.
//
// For the optimization sake, it's better not to use it as a part of a more
// complex data struct, using simple `repeated string` instead.
type Government struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []string `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *Government) Reset() {
	*x = Government{}
	if protoimpl.UnsafeEnabled {
		mi := &file_axiome_vote_v1beta1_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Government) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Government) ProtoMessage() {}

// Deprecated: Use Government.ProtoReflect.Descriptor instead.
func (*Government) Descriptor() ([]byte, []int) {
	return file_axiome_vote_v1beta1_types_proto_rawDescGZIP(), []int{2}
}

func (x *Government) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

// Poll is like Proposal, but it's specified by plain text and has no automatic
// decision execution engine encoded in the blockchain. Also, a wider range of
// people can vote for/against it.
type Poll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is a title of the poll. Optional.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Author is the poll creator's SDK address.
	Author string `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	// Question is the poll formulation.
	Question string `protobuf:"bytes,3,opt,name=question,proto3" json:"question,omitempty"`
	// StartTime denotes when the poll was created.
	// Set by the keeper itself, MUST be omitted in messages.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// EndTime is time when the poll is finished and votes are counted.
	// Set by the kepper itself, MUST be omitted in messages.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Quorum is the share of 'yes' from the total number of votes required for
	// positive decision. Quorum 0 means that only 1 'yes' is sufficient.
	// Optional. Should be omitted if the poll is totally informational and not
	// intended for any decision making.
	Quorum string `protobuf:"bytes,6,opt,name=quorum,proto3" json:"quorum,omitempty"`
	// Types that are assignable to Requirements:
	//
	//	*Poll_CanValidate
	//	*Poll_MinStatus
	Requirements isPoll_Requirements `protobuf_oneof:"requirements"`
}

func (x *Poll) Reset() {
	*x = Poll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_axiome_vote_v1beta1_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Poll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poll) ProtoMessage() {}

// Deprecated: Use Poll.ProtoReflect.Descriptor instead.
func (*Poll) Descriptor() ([]byte, []int) {
	return file_axiome_vote_v1beta1_types_proto_rawDescGZIP(), []int{3}
}

func (x *Poll) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Poll) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Poll) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *Poll) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Poll) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Poll) GetQuorum() string {
	if x != nil {
		return x.Quorum
	}
	return ""
}

func (x *Poll) GetRequirements() isPoll_Requirements {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *Poll) GetCanValidate() *Poll_Unit {
	if x, ok := x.GetRequirements().(*Poll_CanValidate); ok {
		return x.CanValidate
	}
	return nil
}

func (x *Poll) GetMinStatus() v1beta1.Status {
	if x, ok := x.GetRequirements().(*Poll_MinStatus); ok {
		return x.MinStatus
	}
	return v1beta1.Status(0)
}

type isPoll_Requirements interface {
	isPoll_Requirements()
}

type Poll_CanValidate struct {
	// CanValidate denotes that only those who can validate can answer the poll.
	CanValidate *Poll_Unit `protobuf:"bytes,7,opt,name=can_validate,json=canValidate,proto3,oneof"`
}

type Poll_MinStatus struct {
	// MinStatus is the minimal referral status required to answer the poll.
	MinStatus v1beta1.Status `protobuf:"varint,8,opt,name=min_status,json=minStatus,proto3,enum=axiome.referral.v1beta1.Status,oneof"`
}

func (*Poll_CanValidate) isPoll_Requirements() {}

func (*Poll_MinStatus) isPoll_Requirements() {}

type PollHistoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poll     *Poll    `protobuf:"bytes,1,opt,name=poll,proto3" json:"poll,omitempty"`
	Yes      uint64   `protobuf:"varint,2,opt,name=yes,proto3" json:"yes,omitempty"`
	No       uint64   `protobuf:"varint,3,opt,name=no,proto3" json:"no,omitempty"`
	Decision Decision `protobuf:"varint,4,opt,name=decision,proto3,enum=axiome.vote.v1beta1.Decision" json:"decision,omitempty"`
}

func (x *PollHistoryItem) Reset() {
	*x = PollHistoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_axiome_vote_v1beta1_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollHistoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollHistoryItem) ProtoMessage() {}

// Deprecated: Use PollHistoryItem.ProtoReflect.Descriptor instead.
func (*PollHistoryItem) Descriptor() ([]byte, []int) {
	return file_axiome_vote_v1beta1_types_proto_rawDescGZIP(), []int{4}
}

func (x *PollHistoryItem) GetPoll() *Poll {
	if x != nil {
		return x.Poll
	}
	return nil
}

func (x *PollHistoryItem) GetYes() uint64 {
	if x != nil {
		return x.Yes
	}
	return 0
}

func (x *PollHistoryItem) GetNo() uint64 {
	if x != nil {
		return x.No
	}
	return 0
}

func (x *PollHistoryItem) GetDecision() Decision {
	if x != nil {
		return x.Decision
	}
	return Decision_DECISION_UNSPECIFIED
}

type Poll_Unit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Poll_Unit) Reset() {
	*x = Poll_Unit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_axiome_vote_v1beta1_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Poll_Unit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poll_Unit) ProtoMessage() {}

// Deprecated: Use Poll_Unit.ProtoReflect.Descriptor instead.
func (*Poll_Unit) Descriptor() ([]byte, []int) {
	return file_axiome_vote_v1beta1_types_proto_rawDescGZIP(), []int{3, 0}
}

var File_axiome_vote_v1beta1_types_proto protoreflect.FileDescriptor

var file_axiome_vote_v1beta1_types_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x65, 0x2f, 0x76, 0x6f, 0x74, 0x65, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x65, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x65,
	0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0x01,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xf2, 0xde, 0x1f, 0x15, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xea, 0xde, 0x1f, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0xf2, 0xde, 0x1f, 0x0d, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x30,
	0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08,
	0xc8, 0xde, 0x1f, 0x01, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x3a, 0x0c, 0x88, 0xa0, 0x1f, 0x00, 0x98, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x01, 0x22,
	0x92, 0x04, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x5e, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x78,
	0x69, 0x6f, 0x6d, 0x65, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x23, 0xc8, 0xde, 0x1f, 0x00,
	0xea, 0xde, 0x1f, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0xf2, 0xde, 0x1f, 0x0f,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x22, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x57, 0x0a, 0x0a, 0x67, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x37, 0xea,
	0xde, 0x1f, 0x14, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x1b, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0a, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x2f, 0xea, 0xde, 0x1f, 0x10, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x17, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x52, 0x06, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x09, 0x64,
	0x69, 0x73, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x35,
	0xea, 0xde, 0x1f, 0x13, 0x64, 0x69, 0x73, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x1a, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x64, 0x69, 0x73, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x09, 0x64, 0x69, 0x73, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64,
	0x12, 0x4b, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x31, 0xea, 0xde, 0x1f, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x18, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x4f, 0x0a,
	0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x33, 0xea, 0xde, 0x1f, 0x12, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x19, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x3a, 0x04,
	0x88, 0xa0, 0x1f, 0x00, 0x22, 0x4f, 0x0a, 0x0a, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x1d, 0xea, 0xde, 0x1f, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0xf2, 0xde, 0x1f, 0x0e, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x22, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x3a, 0x08, 0x88, 0xa0, 0x1f,
	0x00, 0x98, 0xa0, 0x1f, 0x00, 0x22, 0x9f, 0x06, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x3f,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xea, 0xde,
	0x1f, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0xf2, 0xde, 0x1f, 0x15, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1b, 0xea, 0xde, 0x1f, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0xf2, 0xde, 0x1f, 0x0d, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x52, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xea, 0xde, 0x1f, 0x08, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xde, 0x1f, 0x0f, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x7a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x3f, 0xc8, 0xde, 0x1f, 0x01, 0xea, 0xde, 0x1f, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2,
	0xde, 0x1f, 0x1b, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x90, 0xdf,
	0x1f, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x72, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x3b, 0xc8, 0xde, 0x1f,
	0x01, 0xea, 0xde, 0x1f, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x19, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x79, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x61, 0xc8, 0xde, 0x1f, 0x01, 0xda, 0xde, 0x1f, 0x2a, 0x62, 0x69, 0x74, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x6e, 0x33, 0x64, 0x2f, 0x61,
	0x78, 0x6d, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0xea, 0xde, 0x1f, 0x10, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x17, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x12, 0x6c, 0x0a, 0x0c,
	0x63, 0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x65, 0x2e, 0x76, 0x6f, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x42, 0x27, 0xea, 0xde, 0x1f, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x61,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x22, 0x48, 0x00, 0x52, 0x0b, 0x63,
	0x61, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x65, 0x0a, 0x0a, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x65, 0x2e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x23, 0xea, 0xde, 0x1f, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xf2,
	0xde, 0x1f, 0x11, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x1a, 0x06, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x3a, 0x0c, 0x88, 0xa0, 0x1f, 0x00, 0x98,
	0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x0f, 0x50, 0x6f, 0x6c, 0x6c,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x58, 0x0a, 0x04, 0x70,
	0x6f, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x78, 0x69, 0x6f,
	0x6d, 0x65, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x6c, 0x42, 0x29, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x0b, 0x70, 0x6f,
	0x6c, 0x6c, 0x2c, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0xf2, 0xde, 0x1f, 0x12, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x70, 0x6f, 0x6c, 0x6c, 0x2c, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x52,
	0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x03, 0x79, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x15, 0xea, 0xde, 0x1f, 0x03, 0x79, 0x65, 0x73, 0xf2, 0xde, 0x1f, 0x0a, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x79, 0x65, 0x73, 0x22, 0x52, 0x03, 0x79, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x02, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x13, 0xea, 0xde, 0x1f, 0x02,
	0x6e, 0x6f, 0xf2, 0xde, 0x1f, 0x09, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6e, 0x6f, 0x22, 0x52,
	0x02, 0x6e, 0x6f, 0x12, 0x6e, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x65, 0x2e, 0x76,
	0x6f, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x33, 0xea, 0xde, 0x1f, 0x12, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x19,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2a, 0x58, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x14, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x43,
	0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x47,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42, 0xd5, 0x01,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x65, 0x2e, 0x76, 0x6f, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x40, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x6e, 0x33, 0x64, 0x2f, 0x61, 0x78, 0x6d,
	0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x78, 0x69, 0x6f, 0x6d, 0x65,
	0x2f, 0x76, 0x6f, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x76, 0x6f,
	0x74, 0x65, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x56, 0x58, 0xaa,
	0x02, 0x13, 0x41, 0x78, 0x69, 0x6f, 0x6d, 0x65, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x2e, 0x56, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x13, 0x41, 0x78, 0x69, 0x6f, 0x6d, 0x65, 0x5c, 0x56,
	0x6f, 0x74, 0x65, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x1f, 0x41, 0x78,
	0x69, 0x6f, 0x6d, 0x65, 0x5c, 0x56, 0x6f, 0x74, 0x65, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15,
	0x41, 0x78, 0x69, 0x6f, 0x6d, 0x65, 0x3a, 0x3a, 0x56, 0x6f, 0x74, 0x65, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_axiome_vote_v1beta1_types_proto_rawDescOnce sync.Once
	file_axiome_vote_v1beta1_types_proto_rawDescData = file_axiome_vote_v1beta1_types_proto_rawDesc
)

func file_axiome_vote_v1beta1_types_proto_rawDescGZIP() []byte {
	file_axiome_vote_v1beta1_types_proto_rawDescOnce.Do(func() {
		file_axiome_vote_v1beta1_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_axiome_vote_v1beta1_types_proto_rawDescData)
	})
	return file_axiome_vote_v1beta1_types_proto_rawDescData
}

var file_axiome_vote_v1beta1_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_axiome_vote_v1beta1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_axiome_vote_v1beta1_types_proto_goTypes = []interface{}{
	(Decision)(0),                 // 0: axiome.vote.v1beta1.Decision
	(*Proposal)(nil),              // 1: axiome.vote.v1beta1.Proposal
	(*ProposalHistoryRecord)(nil), // 2: axiome.vote.v1beta1.ProposalHistoryRecord
	(*Government)(nil),            // 3: axiome.vote.v1beta1.Government
	(*Poll)(nil),                  // 4: axiome.vote.v1beta1.Poll
	(*PollHistoryItem)(nil),       // 5: axiome.vote.v1beta1.PollHistoryItem
	(*Poll_Unit)(nil),             // 6: axiome.vote.v1beta1.Poll.Unit
	(*anypb.Any)(nil),             // 7: google.protobuf.Any
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
	(v1beta1.Status)(0),           // 9: axiome.referral.v1beta1.Status
}
var file_axiome_vote_v1beta1_types_proto_depIdxs = []int32{
	7, // 0: axiome.vote.v1beta1.Proposal.messages:type_name -> google.protobuf.Any
	8, // 1: axiome.vote.v1beta1.Proposal.end_time:type_name -> google.protobuf.Timestamp
	1, // 2: axiome.vote.v1beta1.ProposalHistoryRecord.proposal:type_name -> axiome.vote.v1beta1.Proposal
	8, // 3: axiome.vote.v1beta1.Poll.start_time:type_name -> google.protobuf.Timestamp
	8, // 4: axiome.vote.v1beta1.Poll.end_time:type_name -> google.protobuf.Timestamp
	6, // 5: axiome.vote.v1beta1.Poll.can_validate:type_name -> axiome.vote.v1beta1.Poll.Unit
	9, // 6: axiome.vote.v1beta1.Poll.min_status:type_name -> axiome.referral.v1beta1.Status
	4, // 7: axiome.vote.v1beta1.PollHistoryItem.poll:type_name -> axiome.vote.v1beta1.Poll
	0, // 8: axiome.vote.v1beta1.PollHistoryItem.decision:type_name -> axiome.vote.v1beta1.Decision
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_axiome_vote_v1beta1_types_proto_init() }
func file_axiome_vote_v1beta1_types_proto_init() {
	if File_axiome_vote_v1beta1_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_axiome_vote_v1beta1_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_axiome_vote_v1beta1_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalHistoryRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_axiome_vote_v1beta1_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Government); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_axiome_vote_v1beta1_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Poll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_axiome_vote_v1beta1_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollHistoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_axiome_vote_v1beta1_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Poll_Unit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_axiome_vote_v1beta1_types_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Poll_CanValidate)(nil),
		(*Poll_MinStatus)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_axiome_vote_v1beta1_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_axiome_vote_v1beta1_types_proto_goTypes,
		DependencyIndexes: file_axiome_vote_v1beta1_types_proto_depIdxs,
		EnumInfos:         file_axiome_vote_v1beta1_types_proto_enumTypes,
		MessageInfos:      file_axiome_vote_v1beta1_types_proto_msgTypes,
	}.Build()
	File_axiome_vote_v1beta1_types_proto = out.File
	file_axiome_vote_v1beta1_types_proto_rawDesc = nil
	file_axiome_vote_v1beta1_types_proto_goTypes = nil
	file_axiome_vote_v1beta1_types_proto_depIdxs = nil
}
