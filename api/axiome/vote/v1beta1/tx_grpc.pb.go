// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: axiome/vote/v1beta1/tx.proto

package votev1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_Propose_FullMethodName        = "/axiome.vote.v1beta1.Msg/Propose"
	Msg_Vote_FullMethodName           = "/axiome.vote.v1beta1.Msg/Vote"
	Msg_StartPoll_FullMethodName      = "/axiome.vote.v1beta1.Msg/StartPoll"
	Msg_AnswerPoll_FullMethodName     = "/axiome.vote.v1beta1.Msg/AnswerPoll"
	Msg_UpdateParams_FullMethodName   = "/axiome.vote.v1beta1.Msg/UpdateParams"
	Msg_AddGovernor_FullMethodName    = "/axiome.vote.v1beta1.Msg/AddGovernor"
	Msg_RemoveGovernor_FullMethodName = "/axiome.vote.v1beta1.Msg/RemoveGovernor"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	Propose(ctx context.Context, in *MsgPropose, opts ...grpc.CallOption) (*MsgProposeResponse, error)
	Vote(ctx context.Context, in *MsgVote, opts ...grpc.CallOption) (*MsgVoteResponse, error)
	StartPoll(ctx context.Context, in *MsgStartPoll, opts ...grpc.CallOption) (*MsgStartPollResponse, error)
	AnswerPoll(ctx context.Context, in *MsgAnswerPoll, opts ...grpc.CallOption) (*MsgAnswerPollResponse, error)
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	AddGovernor(ctx context.Context, in *MsgAddGovernor, opts ...grpc.CallOption) (*MsgAddGovernorResponse, error)
	RemoveGovernor(ctx context.Context, in *MsgRemoveGovernor, opts ...grpc.CallOption) (*MsgRemoveGovernorResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Propose(ctx context.Context, in *MsgPropose, opts ...grpc.CallOption) (*MsgProposeResponse, error) {
	out := new(MsgProposeResponse)
	err := c.cc.Invoke(ctx, Msg_Propose_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Vote(ctx context.Context, in *MsgVote, opts ...grpc.CallOption) (*MsgVoteResponse, error) {
	out := new(MsgVoteResponse)
	err := c.cc.Invoke(ctx, Msg_Vote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StartPoll(ctx context.Context, in *MsgStartPoll, opts ...grpc.CallOption) (*MsgStartPollResponse, error) {
	out := new(MsgStartPollResponse)
	err := c.cc.Invoke(ctx, Msg_StartPoll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AnswerPoll(ctx context.Context, in *MsgAnswerPoll, opts ...grpc.CallOption) (*MsgAnswerPollResponse, error) {
	out := new(MsgAnswerPollResponse)
	err := c.cc.Invoke(ctx, Msg_AnswerPoll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddGovernor(ctx context.Context, in *MsgAddGovernor, opts ...grpc.CallOption) (*MsgAddGovernorResponse, error) {
	out := new(MsgAddGovernorResponse)
	err := c.cc.Invoke(ctx, Msg_AddGovernor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveGovernor(ctx context.Context, in *MsgRemoveGovernor, opts ...grpc.CallOption) (*MsgRemoveGovernorResponse, error) {
	out := new(MsgRemoveGovernorResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveGovernor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	Propose(context.Context, *MsgPropose) (*MsgProposeResponse, error)
	Vote(context.Context, *MsgVote) (*MsgVoteResponse, error)
	StartPoll(context.Context, *MsgStartPoll) (*MsgStartPollResponse, error)
	AnswerPoll(context.Context, *MsgAnswerPoll) (*MsgAnswerPollResponse, error)
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	AddGovernor(context.Context, *MsgAddGovernor) (*MsgAddGovernorResponse, error)
	RemoveGovernor(context.Context, *MsgRemoveGovernor) (*MsgRemoveGovernorResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) Propose(context.Context, *MsgPropose) (*MsgProposeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (UnimplementedMsgServer) Vote(context.Context, *MsgVote) (*MsgVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedMsgServer) StartPoll(context.Context, *MsgStartPoll) (*MsgStartPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPoll not implemented")
}
func (UnimplementedMsgServer) AnswerPoll(context.Context, *MsgAnswerPoll) (*MsgAnswerPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerPoll not implemented")
}
func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) AddGovernor(context.Context, *MsgAddGovernor) (*MsgAddGovernorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGovernor not implemented")
}
func (UnimplementedMsgServer) RemoveGovernor(context.Context, *MsgRemoveGovernor) (*MsgRemoveGovernorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGovernor not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPropose)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Propose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Propose(ctx, req.(*MsgPropose))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Vote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Vote(ctx, req.(*MsgVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StartPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStartPoll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StartPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StartPoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StartPoll(ctx, req.(*MsgStartPoll))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AnswerPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAnswerPoll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AnswerPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AnswerPoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AnswerPoll(ctx, req.(*MsgAnswerPoll))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddGovernor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddGovernor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddGovernor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddGovernor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddGovernor(ctx, req.(*MsgAddGovernor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveGovernor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveGovernor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveGovernor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveGovernor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveGovernor(ctx, req.(*MsgRemoveGovernor))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "axiome.vote.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Propose",
			Handler:    _Msg_Propose_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Msg_Vote_Handler,
		},
		{
			MethodName: "StartPoll",
			Handler:    _Msg_StartPoll_Handler,
		},
		{
			MethodName: "AnswerPoll",
			Handler:    _Msg_AnswerPoll_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "AddGovernor",
			Handler:    _Msg_AddGovernor_Handler,
		},
		{
			MethodName: "RemoveGovernor",
			Handler:    _Msg_RemoveGovernor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "axiome/vote/v1beta1/tx.proto",
}
