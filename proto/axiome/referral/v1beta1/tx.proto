syntax = "proto3";
package axiome.referral.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";
import "axiome/referral/v1beta1/params.proto";

option go_package = "github.com/axiome-pro/axm-node/x/referral/types";

service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc RegisterReferral(MsgRegisterReferral)
      returns (MsgRegisterReferralResponse);

  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgRegisterReferral place referral to it's referrer
// in Referral marketing module
message MsgRegisterReferral {
  option (cosmos.msg.v1.signer) = "referral_address";
  option (amino.name) = "axiome/MsgRegisterReferral";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string referral_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string referrer_address = 2
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgRegisterReferralResponse defines the Msg/RegisterReferral response
// type.
message MsgRegisterReferralResponse {}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "axiome/referral/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

message MsgUpdateParamsResponse {}